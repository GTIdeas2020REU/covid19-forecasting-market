{"version":3,"sources":["components/Navbar/index.js","constants/routes.js","pages/AboutPage/index.js","pages/LandingPage/index.js","components/LeaderboardChart/index.js","constants/colors.js","containers/Leaderboard/index.js","pages/LeaderboardPage/index.js","utils/data.js","components/UserPredictionChart/index.js","containers/UserPredictionChartContainer/index.js","pages/ProfilePage/index.js","components/InteractiveChart/index.js","components/InteractiveChartTemp/index.js","containers/InteractiveChartContainer/index.js","constants/data.js","components/ParentChart/index.js","components/MainChart/index.js","containers/ChartContainer/index.js","components/Mapportal/index.js","components/LogIn/index.js","components/SignUp/index.js","components/MainChartContainer/index.js","pages/HomePage/index.js","App.js","serviceWorker.js","index.js","components/Navbar/COVIDforecasts-logo-white.png"],"names":["Navbar","props","changeTab","tabID","setState","console","log","state","active","isLoggedIn","fetch","then","response","json","data","loggedinstate","logoutbutton","loginbutton","signupbutton","bind","this","method","headers","className","href","id","data-toggle","onClick","saveLogout","src","covidforecastslogo","style","width","marginTop","type","data-target","aria-controls","aria-expanded","aria-label","exact","activeClassName","to","renderDropdown","React","Component","pstyle","textAlign","marginLeft","fontSize","paddingLeft","paddingRight","h1style","AboutPage","LeaderboardChart","userPrediction","confirmed","chartRef","createRef","renderChart","prevProps","prevState","compiledData","predictionData","confirmedData","Object","keys","map","key","date","d3","value","undefined","defined","d","substring","filter","confirmedStartDate","predEndDate","length","margin","height","svg","current","append","attr","text","x","domain","range","y","call","legendString","classNames","color","legend","selectAll","enter","i","mainArea","lineGenerator","curve","predLineGenerator","line","predLine","today","datum","Date","toISOString","todayMarker","tooltipArea","tooltipBox","on","mouse","xCoord","pageX","pageY","invert","round","element","textBox","select","tempText","Math","empty","html","remove","padding","ref","colors","Table","columns","orgs","forecasts","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","column","render","getHeaderProps","RenderOrgsTable","RenderUsersTable","users","selectedID","user","index","score","values","username","$","removeClass","addClass","ReactDOM","prediction","document","getElementById","createUserChart","parseFloat","toFixed","entries","backgroundColor","org","temp","push","createOrgChart","Leaderboard","handleSelect","e","dropDownTitle","res","predictionLength","Header","accesor","getCellValue","row","children","eq","click","asc","table","parents","find","toArray","sort","a","b","valA","valB","isNumeric","toString","localeCompare","reverse","trigger","querySelector","addEventListener","event","clientX","left","top","clientY","display","marginBottom","Dropdown","onSelect","Toggle","variant","Menu","Item","eventKey","position","LeaderboardPage","organizeData","results","forecast","dates","target_end_date","result","forEach","cleanForecastData","cleaned","rawData","cleanedData","clamp","c","max","min","getMostRecentPrediction","reformatData","reformatPredData","findYatX","path","startX","getXY","len","point","getPointAtLength","start","end","getTotalLength","mid","currPoint","currPointX","getAllDataPoints","pathNode","xAxis","yAxis","startDate","endDate","offset","getDataPointsFromPath","lastPredDate","cleanData","predStartDate","idxOfStartDate","f","splice","getLastValue","getLastDate","createDefaultPrediction","defaultData","currDate","UserPredictionChart","category","userStatus","innerHTML","aggregate","p","sortedDict","dateObj","sortDictByDate","sortedDates","sortStringDates","mostRecentPred","predCurve","tooltip","mousePerLine","todayDate","newDate","pred","floor","ceil","UserPredictionChartContainer","ProfilePage","renderUser","InteractiveChart","loginStatus","renderChartUnregistered","body","JSON","stringify","modal","createElement","modalContent","innerText","signinBtn","onclick","window","location","signupBtn","appendChild","confirmedLastVal","confirmedLastDate","mse","orgIndices","sortable","err","sortedOrgs","j","tempForecast","Array","k","appendModal","w","h","forecastData","aggregateData","confirmedMax","forecastMax","currMax","yAxisMax","nice","concat","models","o","names","modelClassNames","labels","confirmedLine","confirmedAreaEndX","confirmedAreaEndY","predictionArea","yourLine","slice","getElementsByClassName","filteredData","forecastPaths","querySelectorAll","confirmedPath","aggregatePath","name","lastDate","m","node","getBoundingClientRect","drawingInstruction","selectCircle","drag","pos","focusPredCurve","focusPredLine","target","chart","yCoord","xLowerBoundary","focus","focusX","focusY","brush","extent","selection","newX","gb","move","defaultSelection","focusLine","filtered","legendCompleteWidth","legendConfirmed","legendAggregate","legendPrediction","legendGeorgiaTech","legendIhme","legendYouyang","legendColumbia","legendUcla","savePrediction","confirmedAreaWidth","clickAreaWidth","deletePrediction","class","InteractiveChartTemp","confirmedAvg","loggedIn","confirmedTemp","confirmedBoundary","defs","confirmedArea","cleanPrediction","predictionLine","focusHeight","createFocusContext","titles","forecastIdentifiers","MainChart","compiled","title","subtitle","forecastLabels","forecastIds","formattedData","unshift","compiledIds","confirmedEndDate","ChartContainer","allData","dataList","jsonData","mapStyle","feature","weight","opacity","dashArray","fillOpacity","fillColor","Mapportal","onEachFeature","layer","bindTooltip","properties","noHide","openTooltip","mouseover","highlightFeature","mouseout","resetHighlight","alert","setStyle","L","Browser","ie","opera","edge","bringToFront","geojson","resetStyle","countries","center","zoom","layers","tileLayer","maxZoom","attribution","geoJson","statesData","addTo","countriesData","overlay","control","layerGroup","Login","wasSucess","Promise","resolve","reject","updateLoginState","setTimeout","password","preventDefault","saveLogin","onSubmit","handleSubmit","onChange","handleChange","required","SignUp","nam","email","MainChartContainer","CaseData","HomePage","App","component","Boolean","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.3fb9f442.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\nimport covidforecastslogo from './COVIDforecasts-logo-white.png'\nimport './Navbar.css'\n\nclass Navbar extends React.Component {\n  \tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tloggedinstate: '', \n\t\t\tlogoutbutton: null, \n\t\t\tloginbutton: null, \n\t\t\tsignupbutton: null,\n\t\t}\n\t\tthis.isLoggedIn = this.isLoggedIn.bind(this)\n\t}\n\n\t/*\n\tisLoggedIn() {\n\t\tfetch('/user-status').then(res => res.json()).then(data => {\n\t\t\tthis.setState({ users: data });\n\t\t});\n\t}*/\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"nav bar loading\");\n\t\tthis.isLoggedIn();\n\t\tthis.setState({'active': 'home'});\n\t}\n\n\tchangeTab = (tabID) => {\n\t\tthis.setState({'active': tabID});\n\t\tconsole.log(\"ACTIVE TAB\");\n\t\tconsole.log(this.state.active);\n\t}\n\n\tasync saveLogout() {\n\t\tfetch('/logout/',{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t}\n\t\t});\n\t}\n\n\tisLoggedIn = () => {\n\t\tfetch('/login-status/')\n\t\t.then((response) => response.json())\n\t\t.then((data) => this.setState({loggedinstate: data}));\n\t}\n\n\n\trenderDropdown(){\n\t\tif (this.state.loggedinstate['logged in']) {\n\t\t\treturn (\n\t\t\t\t<div className='navbar-nav ml-auto dropleft'>\n\t\t\t\t\t<ul className=\"navbar-nav ml-auto\">\n\t\t\t\t\t\t<li className=\"nav-item dropdown ml-auto\">\n\t\t\t\t\t\t\t<a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">\n\t\t\t\t\t\t\t\tHello {this.state.loggedinstate['name']}!\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<div className=\"dropdown-menu dropdown-menu-left\">\n\t\t\t\t\t\t\t\t<a className=\"dropdown-item\" href={ROUTES.PROFILE}>My Predictions</a>\n\t\t\t\t\t\t\t\t<a className=\"dropdown-item\" onClick={() => this.saveLogout()} href={ROUTES.LANDING}>Sign Out</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<div className='navbar-nav ml-auto dropleft'>\n\t\t\t\t\t<ul className=\"navbar-nav ml-auto\">\n\t\t\t\t\t\t<li className=\"nav-item dropdown\">\n\t\t\t\t\t\t\t<a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbardrop\" data-toggle=\"dropdown\">Welcome</a>\n\t\t\t\t\t\t\t<div className=\"dropdown-menu\">\n\t\t\t\t\t\t\t\t<a className=\"dropdown-item\" href={ROUTES.SIGN_UP}>Sign Up</a>\n\t\t\t\t\t\t\t\t<a className=\"dropdown-item\" href={ROUTES.SIGN_IN}>Sign In</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\n\n  \trender() {\n\t\treturn (\n\t\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n\t\t\t\t<a className=\"navbar-brand\" href='/'>\n\t\t\t\t\t<img id='logo' src={covidforecastslogo} style={{width:450, marginTop: -10}}></img>\n\t\t\t\t</a>\n\t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\n\t\t\t\t</button>\n\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n\t\t\t\t\t<div className=\"navbar-nav\">\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.LANDING}>Home</NavLink>\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.ABOUT}>About</NavLink>\n\t\t\t\t\t\t<NavLink exact activeClassName=\"active\" className=\"nav-item nav-link\" to={ROUTES.LEADERBOARD}>Top Forecasts</NavLink>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.renderDropdown()}\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t);\n  \t}\n}\n\nexport default Navbar;\n","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const ABOUT = '/about';\nexport const PROFILE = '/profile';\nexport const MAP_PORTAL = '/map-portal';\nexport const MARKET = '/market';\nexport const LEADERBOARD = '/leaderboard';\nexport const US_NATIONAL_CUM = '/us-national-cumulative';\nexport const US_NATIONAL_INC = '/us-national-incident';\nexport const US_STATE = '/us-state';\n","import React, { Component } from 'react';\n\nconst pstyle = {\n    textAlign: 'left',\n    marginLeft: '20px',\n    fontSize: '20px',\n     paddingLeft: '100px',\n     paddingRight: '100px'\n}\n\nconst h1style = {\n    textAlign: 'left',\n    marginLeft: '20px',\n    fontSize: '40px',\n    paddingLeft: '100px',\n     paddingRight: '100px'\n}\n\nclass AboutPage extends Component {\n    render() {\n        return(\n            <div>\n                <br></br>\n                <h1 style={h1style}>About</h1>\n                <h3></h3>\n                <p style={pstyle}> \n                    This Aggregate COVID-19 site aims to show various past data readings of coronavirus data, as well as future predictions from various sources. \n                    Different forecasts relating to the COVID-19 pandemic are displayed, and users can make their own predictions about the future trajectory of \n                    factors relating to the pandemic such as daily deaths, hospitalizations and cases.\n                    Our mission is to deliver future projections and collected data by providing the best information on the COVID-19 pandemic.\n                </p>\n                <br></br>\n                <h1 style={h1style}>Privacy</h1>\n                <p style={pstyle}>User-contributed forecast data is used to create aggregate forecasts and is displayed to other visitors on the \"Top Forecasts\" page. It may also be used, anonymized, for academic research purposes. Other than that, we do not and will not share or sell any user or visitor information for any reason.</p>\n\n                 <small>Created by the Aggregators Team of the <a href='http://www.covideas20reu.org/about'>COV-IDEAS 2020 REU</a></small>\n               \n            </div>\n        );  \n    }\n}\n\nexport default AboutPage;","import React, { Component } from 'react';\n\nclass LandingPage extends Component {\n\n    render() {\n        return (\n            <div>\n                <div class=\"container landing\">\n                    <h1 class=\"logo\">COVID-19 Prediction</h1>\n                </div>\n                <div class=\"landing\">\n                    <div class=\"title\"> Welcome<br/>\n                        <button class=\"button\"><b><a href=\"#\">Start</a></b></button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './LeaderboardChart.css';\n\nclass LeaderboardChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            userPrediction: null,\n            confirmed: null,\n         };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.setState({userPrediction: this.props.userPrediction, confirmed: this.props.confirmed});\n        this.renderChart();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // only update chart if the data has changed\n        if (prevProps.userPrediction !== this.props.userPrediction) {\n            this.renderChart();\n        }\n    }\n\n\n    renderChart() {\n        var { userPrediction, confirmed } = this.props;\n        var compiledData = [];\n        var predictionData = [];\n        //format confirmedData, predictionData\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        if (userPrediction[0].defined == undefined) {\n            predictionData = userPrediction.map(d => ({\n                date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                value: d.value,\n                defined: true\n            }));\n        }\n        else {\n            predictionData = userPrediction.map(d => ({\n                date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                value: d.value,\n                defined: d.defined\n            }));\n        }\n        predictionData = predictionData.filter(d => d.defined);       \n        compiledData = [confirmedData, predictionData]\n        //IMPORTANT BOUNDARIES// \n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-02-01\");\n        var predEndDate = predictionData[predictionData.length - 1].date;\n        const valueMax = 5000;\n\n        /////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 600 - margin.left - margin.right,\n            height = 300 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        //.attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        //.attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                        .attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom + contextHeight + 100}`)\n                        .attr('preserveAspectRatio','xMinYMin meet')\n                    .append(\"g\")\n                        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height + 2*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (height/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const classNames = ['confirmed', 'prediction'];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n\n        var legend = svg\n                        .append('g')\n                        .attr(\"viewBox\", \"0 0 400 500\")\n                        .append('g')\n                        .attr(\"id\", \"legend\");\n\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width*3/5+40)\n                    //.attr('cx', width-65)\n                    .attr(\"cy\", function(d,i){ return 0 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    .style(\"fill\", function(d){ return color(d)});\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width*3/5+60)\n                    //.attr(\"x\", width-50)\n                    .attr(\"y\", function(d,i){ return 0 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return 'black'})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\");\n\n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        var line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) });\n        var predLine = predLineGenerator\n                            .defined(d => d.defined)\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) });\n\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"lbConfirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]));\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"lbPrediction\")\n                                .attr(\"class\", \"line\")\n                                .datum(predictionData)\n                                .attr(\"d\", predLine)\n                                .attr(\"stroke\",  color(legendString[1]));\n\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\");\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\");\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\");\n        //////////add tooltip///////////////////////////////////////////////////////////////////////\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        tooltipArea.append(\"text\")\n                    .attr(\"x\", 10)\n                    .attr(\"y\", 10)\n                    .attr(\"class\", \"confirmed confirmed-value\")\n                    .text(\"Confirmed: \")\n        tooltipArea.append(\"text\")\n                    .attr(\"x\", 10)\n                    .attr(\"y\", 30)\n                    .attr(\"class\", \"prediction prediction-value\")\n                    .text(\"User Prediction: \")\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n                            .style(\"position\", \"absolute\")\n                            .style(\"display\", \"block\")\n                            .style(\"left\", \"10px\")\n                            .style(\"top\", \"10px\");\n\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d, i) {\n                            return color(legendString[i]);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n                            .append(\"svg:rect\")\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', 'none')\n                            .attr('pointer-events', 'all')\n                            //.style(\"cursor\", \"pointer\")\n                            .on('mouseout', function() { // on mouse out hide line, circles and text\n                                console.log(\"out\")\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"0\")\n                                tooltipBox.style(\"display\", \"none\")\n                            })\n                            .on('mouseover', function() { // on mouse in show line, circles and text\n                                // console.log(\"over\")\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                                tooltipBox.style(\"display\", \"block\")\n                            })\n                            .on('mousemove', function() { // mouse moving over canvas\n                                var mouse = d3.mouse(this);\n                                var xCoord = mouse[0];\n                                var yCoord = mouse[1];\n                                d3\n                                    .select(\"#tooltip-line\")\n                                    .attr(\"d\", function() {\n                                        var d = \"M\" + xCoord + \",\" + height;\n                                        d += \" \" + xCoord + \",\" + 0;\n                                        return d;\n                                    });\n                                tooltipBox\n                                    .style('left', `${d3.event.pageX + 20}px`)\n                                    .style('top', `${d3.event.pageY + 20}px`)\n                                d3\n                                    .selectAll(\".mouse-per-line\")\n                                    .attr(\"transform\", function(d, i) {\n                                        if (d.length === 0) {return;}\n                                        var date = x.invert(xCoord);\n                                        var value = -1;\n                                        d.map(data => {\n                                            if(+data.date === +d3.timeDay.round(date) && data.defined !== 0) {\n                                                value = data.value;\n                                            }\n                                        })\n                                        var element = d3.select(this);\n                                        var textBox = tooltipBox.select(`.${classNames[i]}`);\n                                        var tempText = d3.select(`.${classNames[i]}`)\n\n                                        if (value >= 0) {\n                                            // d3.select(\".current-value\").text(`${Math.round(value)}`)\n                                            if (i == 0) {\n                                                tempText.text(`Confirmed: ${Math.round(value)}`)\n                                            }\n                                            else {\n                                                tempText.text(`User Prediction: ${Math.round(value)}`)\n                                            }\n\n                                            if(textBox.empty()) {\n                                                textBox = tooltipBox.append(\"div\")\n                                                                     .attr(\"class\", classNames[i])\n                                                                     .style(\"padding-left\", \"10px\")\n                                                                     .style(\"padding-right\", \"10px\")\n                                                                     .style(\"background-color\", color(legendString[i]))\n                                                                     .style(\"color\", \"white\");\n\n                                            }\n                                            else {\n                                                textBox.html(`${legendString[i]}: ${Math.round(value)}`)\n                                            }\n                                            element.select(\"circle\")\n                                                    .style(\"opacity\", \"1\");\n                                            return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                                        }\n                                        else {\n                                            if (i == 0) {\n                                                tempText.text(`Confirmed:`)\n                                            }\n                                            else {\n                                                tempText.text(`User Prediction:`)\n                                            }\n                                            if(!textBox.empty()) {\n                                                textBox.remove();\n                                            }\n\n                                            element\n                                                    .select(\"circle\")\n                                                    .style(\"opacity\", \"0\");\n                                        }\n                                });\n                            })\n    }\n\n\n    render() {\n        return(\n            // <div>\n                <div style={{padding: \"20px\"}} ref={this.chartRef}></div>\n                // <div className=\"tooltip-box\"></div>\n            /* </div>  */\n        );\n    }\n}\n\nexport default LeaderboardChart;\n","var colors = {\n    'Columbia': 'rgb(172, 204, 230)',\n    'Georgia Tech': 'rgb(179, 163, 105)',\n    'UCLA': 'rgb(39, 116, 174)',\n    'IHME': 'rgb(87, 175, 85)',\n    'Youyang Gu': 'rgb(196, 129, 14)'\n}\n\nexport default colors;","import React from 'react';\nimport { useTable } from 'react-table';\nimport $ from 'jquery';\nimport ReactDOM from 'react-dom';\nimport { Dropdown } from 'react-bootstrap';\nimport LeaderboardChart from '../../components/LeaderboardChart';\nimport colors from '../../constants/colors';\nimport './Leaderboard.css'\n\n\n// Create leaderboard table, consisting of user predictions and official forecasts\nfunction Table({ columns, data, confirmed, orgs, forecasts, style }) {\n  // Use the state and functions returned from useTable to build UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n    confirmed,\n    orgs,\n    forecasts,\n    style\n  });\n\n  // Render the UI for table\n  return (\n    <table style={style} className=\"table table-bordered table-hover table-sm\" {...getTableProps()}>\n      <thead className=\"thead-dark\">\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th id={column.render('Header')} {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {<RenderOrgsTable orgs={orgs} forecasts={forecasts} confirmed={confirmed} />}\n        {<RenderUsersTable users={data} confirmed={confirmed} />}\n      </tbody>\n    </table>\n  )\n}\n\n\nvar selectedID = \"\"; // var used to keep chart in place if same row was clicked\n// Display user's prediction when user's row is clicked on\nfunction createUserChart(user, confirmed, id) {\n  $('tr').removeClass('clicked');\n  $('#' + id).addClass('clicked');\n  if (selectedID !== id) {\n    $('#predictionChart div').empty(); // reset predictionChart\n  }\n  selectedID = id;\n  ReactDOM.render(<LeaderboardChart userPrediction={user.prediction} confirmed={confirmed} />, document.getElementById('predictionChart'));\n}\n\n// Display official forecaster's prediction when its row is clicked on\nfunction createOrgChart(org, confirmed, id) {\n  var data = [];\n  for (var i = 0; i < org['target_end_date'].length; i++) {\n    var temp = {}\n    temp['date'] = org['target_end_date'][i]\n    temp['value'] = org['value'][i];\n    data.push(temp);\n  }\n  \n  $('tr').removeClass('clicked');\n  $('#' + id).addClass('clicked');\n  if (selectedID !== id) {\n    $('#predictionChart div').empty(); // reset predictionChart\n  }\n  selectedID = id;\n  ReactDOM.render(<LeaderboardChart userPrediction={data} confirmed={confirmed} />, document.getElementById('predictionChart'));\n}\n\n\n// Add rows with user data to the leaderboard table\nfunction RenderUsersTable({ users, confirmed }) {\n  return users.map((user, index) => {\n    // score is always last key\n    var score = Object.values(user)[Object.keys(user).length - 1];\n    // ignore null MSE values\n    if (score == null || typeof(score) != \"number\") {\n      return;\n    }\n    return (\n       <tr id={user.username + user.date} onClick={() => createUserChart(user, confirmed, user.username + user.date)}>\n          <td>{user.username}</td>\n          <td>{user.date}</td>\n          <td>{parseFloat(score).toFixed(2)}</td>\n       </tr>\n    );\n });\n}\n\n\n// Add rows with official forecast data to the leaderboard table\nfunction RenderOrgsTable({ orgs, forecasts, confirmed }) {\n  return Object.entries(orgs).map( ([key, value]) => {\n    // ignore null MSE values\n    if (value == null) {\n      return;\n    }\n    return (\n      <tr id={key} style={{backgroundColor: colors[key]}} onClick={() => createOrgChart(forecasts[key], confirmed, key)}>\n          <td>{key}*</td>\n          <td>Ongoing</td>\n          <td>{parseFloat(value).toFixed(2)}</td>\n      </tr>\n    );\n  });\n}\n\n\n\nclass Leaderboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: null,\n      columns: null,\n      confirmed: null,\n      orgs: null,\n      forecasts: null,\n      predictionLength: 1,\n      dropDownTitle: 'overall'\n    }\n  }\n\n  componentDidMount() {\n    fetch('/user-data-overall').then(res => res.json()).then(data => {\n      this.setState({ users: data });\n    });\n    fetch('/us-mse-overall').then(res => res.json()).then(data => {\n      this.setState({ orgs: data });\n    });\n\n    this.setState({ columns: [\n        {\n          Header: 'Username/Official Forecaster',\n          accesor: 'username',\n        },\n        {\n          Header: 'Prediction Date/Status',\n          accesor: 'date',\n        },\n        {\n          Header: 'Score',\n          accesor: 'mse_score',\n        }\n      ]\n    });\n\n    fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n      this.setState({ confirmed: data });\n    });\n\n    fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n      this.setState({ forecasts: data });\n    });\n\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // Table should sort by error when MSE header is clicked on\n    $('#Score').click(function() {\n      if (this.asc === undefined) {\n          this.asc = true;\n      }\n      var table = $(this).parents('table').eq(0)\n      var rows = table.find('tr:gt(0)').toArray().sort(comparer($(this).index()))\n      this.asc = !this.asc\n    \n      if (!this.asc){\n          rows = rows.reverse()\n      }\n      for (var i = 0; i < rows.length; i++) {\n          table.append(rows[i])\n      }\n    })\n    function comparer(index) {\n        return function(a, b) {\n            var valA = getCellValue(a, index), valB = getCellValue(b, index)\n            return $.isNumeric(valA) && $.isNumeric(valB) ? valA - valB : valA.toString().localeCompare(valB)\n        }\n    }\n    function getCellValue(row, index){ \n        return $(row).children('td').eq(index).text() \n    }\n\n    // Trigger click events to get orgs and users sorted together\n    $('#Score').trigger(\"click\");\n    $('#Score').trigger(\"click\");\n    if (document.querySelector('#Score')) {\n      document.querySelector('#Score').addEventListener(\"mousemove\", function mouseOver(event) {\n        let hoverText = document.querySelector(\".score-hover\");\n        console.log(event.clientX);\n        document.querySelector(\".score-hover\").style.left = `${event.clientX + 15}px`;\n        document.querySelector(\".score-hover\").style.top = `${event.clientY -250}px`;\n        document.querySelector(\".score-hover\").style.display = \"block\";\n      })\n      document.querySelector('#Score').addEventListener(\"mouseout\", function mouseOut() {\n        console.log(\"mouseout\");\n        document.querySelector(\".score-hover\").style.display = \"none\";\n      })\n    }\n  }\n\n  handleSelect = (e) => {\n    this.setState({dropDownTitle: e});\n    fetch('/user-data-' + e).then(res => res.json()).then(data => {\n      this.setState({ users: data });\n    });\n    fetch('/us-mse-' + e).then(res => res.json()).then(data => {\n      this.setState({ orgs: data });\n      console.log(data);\n    });\n  }\n\n\n  render() {\n    const tableStyle = {\n      width: \"50%\",\n      textAlign: \"center\",\n      overflowY: \"scroll\"\n    };\n    \n    const chartStyle = {\n      position: \"fixed\",\n      width: \"50%\",\n      left: \"50%\",\n      top: \"30%\"\n    };\n\n    $(\"#delete-btn\").remove();\n\n    const { users, columns, confirmed, orgs, forecasts } = this.state;\n    if (!users || !columns || !confirmed || !orgs || !forecasts) return 'Loading...';\n    //var dropdownTitle = this.state.predictionLength <= 1 ? ' week ahead' : 'weeks ahead'\n\n    return (\n      <div>\n        <br></br>\n        <h2 style={{marginBottom: 0}}>Top Forecasts</h2>\n        <small>* indicates an official forecaster as labelled by the CDC</small>\n        <Dropdown onSelect={this.handleSelect}>\n          <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n            {this.state.dropDownTitle}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item eventKey=\"overall\">overall</Dropdown.Item>\n            <Dropdown.Item eventKey=\"1-week-ahead\">1-week-ahead</Dropdown.Item>\n            <Dropdown.Item eventKey=\"2-week-ahead\">2-week-ahead</Dropdown.Item>\n            <Dropdown.Item eventKey=\"4-week-ahead\">4-week-ahead</Dropdown.Item>\n            <Dropdown.Item eventKey=\"8-week-ahead\">8-week-ahead</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        <br></br>\n        <div className=\"main\">\n          <div className=\"table\">\n            <Table id=\"leaderboard\" columns={columns} data={users} confirmed={confirmed} orgs={orgs} forecasts={forecasts}  />\n            {/* style={tableStyle} */}\n            <div className=\"score-hover\">Mean Squared Error</div>\n          </div>\n          <div className=\"chart\">\n            <div id=\"predictionChart\" className=\"text-center\" style={chartStyle}>Click on a row to display a user's prediction!</div>\n          </div>\n        </div>\n      \n      </div>\n    );\n  }\n}\n\n\nexport default Leaderboard;","import React, { Component } from 'react';\n\nimport Leaderboard from '../../containers/Leaderboard';\n\nclass LeaderboardPage extends Component {\n    render() {\n        return (\n            <Leaderboard></Leaderboard>\n        )\n    }\n}\n\nexport default LeaderboardPage;","import * as d3 from 'd3'\n\nexport const cleanConfirmedData = (data, dates) => {\n  var result = {};\n  for (var i = 0; i < dates.length; i++) {\n    result[dates[i]] = data[dates[i]];\n  }\n  return result;\n};\n\nexport const organizeData = (data) => {\n  var orgs = Object.keys(data);\n  var results = [];\n  for (var i = 0; i < orgs.length; i++) {\n    var forecast = data[orgs[i]];\n    var dates = forecast.target_end_date;\n    var values = forecast.value;\n\n    var result = {};\n    dates.forEach((key, i) => result[key] = values[i]);\n    results.push(result);\n  }\n\n  return [results, orgs];\n}\n\nexport const cleanForecastData = (data) => {\n  let orgs = Object.keys(data);\n  let cleaned = []\n  orgs.forEach(org => {\n    let rawData = data[org];\n    let dates = rawData.target_end_date;\n    let values = rawData.value;\n    let cleanedData = {}\n    dates.forEach((date, i) => cleanedData[date] = values[i])\n    cleaned.push({\n      \"name\": org,\n      \"data\": cleanedData\n    })\n  })\n  return cleaned;\n}\n\n\nfunction addDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\n\nexport const getDates = () => {\n  var current = new Date(2020, 2, 28);\n  var end = new Date();\n  var dateArray = [];\n  while (current <= end) {\n      dateArray.push(new Date(current).toISOString().slice(0,10));\n      current = addDays(current, 1);\n  }\n  return dateArray;\n}\n\nexport const clamp = (a, b, c) => { \n  return Math.max(a, Math.min(b, c)) \n}\n\nexport const formatValue = (value) => {\n  return value.toLocaleString(\"en\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\nexport const callout = (g, value) => {\n  if (!value) return g.style(\"display\", \"none\");\n\n  g\n      .style(\"display\", null)\n      .style(\"pointer-events\", \"none\")\n      .style(\"font\", \"10px sans-serif\");\n\n  const path = g.selectAll(\"path\")\n    .data([null])\n    .join(\"path\")\n      .attr(\"fill\", \"white\")\n      .attr(\"stroke\", \"black\");\n\n  const text = g.selectAll(\"text\")\n    .data([null])\n    .join(\"text\")\n    .call(text => text\n      .selectAll(\"tspan\")\n      .data((value + \"\").split(/\\n/))\n      .join(\"tspan\")\n        .attr(\"x\", 0)\n        .attr(\"y\", (d, i) => `${i * 1.1}em`)\n        .style(\"font-weight\", (_, i) => i ? null : \"bold\")\n        .text(d => d));\n\n  const {x, y, width: w, height: h} = text.node().getBBox();\n\n  text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n  path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n}\n\nexport const sortDictByDate = (data) => {\n  var sortedDict = {};\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(a) - new Date(b));\n  sortedDates.map(d => {\n    const dateObj = d3.timeParse(\"%Y-%m-%d\")(d);\n    sortedDict[dateObj] = data[d]\n  })\n  return sortedDict;\n}\n//pass in list of string dates, return string dates y-m-d\nexport const sortStringDates = (data) => {\n  var sortedDates = data.sort((a, b) => new Date(a) - new Date(b));\n  sortedDates = sortedDates.map(d => d3.timeParse(\"%Y-%m-%d\")(d));\n  return sortedDates;\n}\n\nexport const getMostRecentPrediction = (data) => {\n  if (Object.keys(data).length === 0) return null;\n  const sortedDates = Object.keys(data).sort((a, b) => new Date(b) - new Date(a));\n  const mostRecentDate = sortedDates[0];\n  return data[mostRecentDate]\n}\n\nexport const reformatData = (data) => {\n  return Object.keys(data).map(key => ({\n    date: d3.timeParse(\"%Y-%m-%d\")(key),\n    value: data[key]\n}));\n}\n\nexport const reformatPredData = (data) => {\n  return data.map(d => ({\n      date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n      value: d.value,\n      defined: d.defined\n      })\n  );\n}\n//returns y coordinate at given x \n/*export const findYatX = (x, path) => {\n  if (x > path.getTotalLength()) {return null}\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y];\n  }\n  var start = 0;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.01; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.01;\n    }\n    else {\n      console.log(currPointX);\n      result = currPoint[1];\n      break;\n    }\n  }\n  if (result == 0) {\n    console.log(start, end);\n    return getXY(start)[1];\n  }\n  return result;\n}*/\n\nexport const findYatX = (x, path, startX) => {\n  const getXY = (len) => {\n      var point = path.getPointAtLength(len);\n      return [point.x, point.y, len];\n  }\n  var start = startX;\n  var end = path.getTotalLength();\n  var result = 0;\n  while (start < end) { \n    var mid = (start + end) / 2;\n    var currPoint = getXY(mid);\n    var currPointX = currPoint[0];\n    if (x < currPointX) {\n      end = mid - 0.001; //does it have to be 0.01?\n    }\n    else if (x > currPointX) {\n      start = mid + 0.001;\n    }\n    else {\n      result = currPoint;\n      break;\n    }\n  }\n  if (result === 0) {\n    result = getXY(start);\n  }\n  return result;\n}\n\n//for confirmedData, forecastData, aggregateData\nexport const getAllDataPoints = (pathNode, xAxis, yAxis, startDate, endDate) => {\n  var data = [];\n  var date = startDate;\n  var startX = 0;\n  while (+date <= +endDate) {\n    var x = xAxis(date);\n    var point = findYatX(x, pathNode, startX);\n    data.push({\n      date: date,\n      value: yAxis.invert(point[1])\n    });\n    startX = point[2];\n    date = d3.timeDay.offset(date, 1);\n  }\n  return data;\n}\nexport const getDataPointsFromPath = (predictionData, pathNode, xAxis, yAxis, lastPredDate) => {\n  var date = predictionData[0].date;\n  var startX = 0;\n  for (var i = 0; i < predictionData.length; i++) {\n    if (+predictionData[i].date > +lastPredDate) {\n      break;\n    }\n    if (predictionData[i].defined === 0) {\n      date = predictionData[i].date;\n      var point = findYatX(xAxis(date), pathNode, startX);\n      predictionData[i].defined = true;\n      predictionData[i].value = yAxis.invert(point[1]);\n      startX = point[2];\n    }\n  }\n  return predictionData;\n}\n\nexport const cleanData = (data, predStartDate, value) => {\n  var idxOfStartDate = d3.bisector(f => f.date).left(data, predStartDate);\n  if (data.length > 0 && +data[idxOfStartDate].date === +predStartDate) {\n    data[idxOfStartDate].value = value;\n  }\n  else {\n    data.splice(idxOfStartDate, 0, {\n        date: predStartDate,\n        value: value\n    });\n  } \n  return data.splice(idxOfStartDate, data.length);\n}\n\nexport const getLastValue = (data) => {\n  return data[data.length - 1].value;\n}\n\nexport const getLastDate = (data) => {\n  return data[data.length - 1].date;\n}\n\nexport const color = (names) => {\n  d3\n    .scaleOrdinal()\n    .domain(names)\n    .range(d3.schemeTableau10);\n}\n\nexport const createDefaultPrediction = (predStartDate, predEndDate) => {\n  var defaultData = [];\n  var currDate = predStartDate;\n  //var defined = true;\n  //var value = confirmedData[confirmedData.length - 1].value;\n  \n  //create defaultPredictionData\n  while(+currDate <= +predEndDate) {\n      defaultData.push({date: currDate, value: 0, defined: 0});\n      currDate = d3.timeDay.offset(currDate, 1);\n  }\n  return defaultData;\n}\n\nexport const cleanPrediction = (data, predStartDate, predEndDate, confirmedLastVal) => {\n  if (+data[0].date !== +predStartDate) {\n    console.log(\"needs to be reformatted\")\n    data = reformatPredData(data);\n    var currDate = d3.timeDay.offset(getLastDate(data), 1);\n    data = data.concat(createDefaultPrediction(currDate, predEndDate));\n  }\n  data = data.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n  data[0].value = confirmedLastVal;\n  data[0].defined = true;\n  return data;\n}\n\n\nexport const savePrediction = (data, category) => {\n  fetch('/update/',{\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\"data\": data, \"category\": category}),\n  });\n}\n\nexport const createFocusContext = (svg, width, height, marginBottom, confirmedData, aggregateData, forecastData, predictionData, labels, x, y, xAxis, line, predLine, color) => {\n  const focusHeight = 100;\n  const focusMargin = 50;\n  var focus = svg\n                  .append(\"g\")\n                      .attr(\"viewBox\", [0, 0, width, focusHeight])\n                      .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                      //.attr(\"width\", width + 100)\n                      //.attr(\"height\", height)\n                      .style(\"display\", \"block\")\n\n  var focusX = d3\n                  .scaleTime()\n                  .domain(x.domain())\n                  .range([0, width]);\n  const focusY = d3\n                  .scaleLinear()\n                  .domain(y.domain())\n                  .range([focusHeight - focusMargin, 0])\n                  .nice();\n  \n  var focusXAxis = focus\n                        .append(\"g\")\n                        .attr(\"transform\", `translate(0,${focusHeight - marginBottom})`)\n                        .call(d3.axisBottom(focusX));\n  const brush = d3.brushX()\n                  .extent([[0, 0], [width, focusHeight - marginBottom]])\n                  .on(\"brush\", brushed)\n                  .on(\"end\", brushended);\n\n  const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n\n  const focusLine = d3.line()\n                      .curve(d3.curveCatmullRom)\n                      .x(function(d) {return x(d.date)})\n                      .y(function (d) {return focusY(d.value)})\n  \n  const focusPredLine = d3.line()\n                          .curve(d3.curveBasis)\n                          .defined(d => d.defined)\n                          .x(function(d) { return x(d.date) })\n                          .y(function(d) { return focusY(d.value) })        \n  focus.append(\"path\")\n      .datum(confirmedData)\n      .attr(\"d\", focusLine)\n      .attr(\"class\", \"context-curve\")\n      .attr(\"stroke\", color(labels[1]))\n  \n  focus.append(\"path\")\n      .datum(aggregateData)\n      .attr(\"d\", focusLine)\n      .attr(\"class\", \"context-curve\")\n      .attr(\"stroke\", color(labels[2]))\n\n  var contextPredCurve = focus.append(\"path\")\n                              .datum(predictionData)\n                              .attr(\"d\", focusPredLine)\n                              .attr(\"class\", \"context-curve\")\n                              .attr(\"stroke\", color(labels[0]))\n  console.log(labels);\n  focus.selectAll(\".forecast-small\")\n        .data(forecastData)\n        .enter()\n        .append(\"path\")\n            .attr(\"d\", line)\n            .attr(\"class\", \"context-curve\")\n            .style(\"stroke\", (f, index) => color(labels[3 + index]))\n            .style(\"stroke-width\", \"2px\");\n\n  function brushed() {\n      if (d3.event.selection) {\n          var extent = d3.event.selection;\n          x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n          xAxis.call(d3.axisBottom(x))\n          var newX = x(getLastDate(confirmedData));\n          newX = newX < 0 ? 0 : newX;\n          d3\n              .select(\"#prediction-clip\")\n              .select(\"rect\")\n                  .attr(\"width\", width - newX)\n                  .attr(\"x\", newX);\n          d3\n                  .select(\"#confirmed-clip\")\n                  .select(\"rect\")\n                      .attr(\"width\", newX)\n\n          svg\n              .selectAll(\".line\")\n              .attr('d', line)\n\n          svg\n              .select(\"#your-line\")\n              .attr(\"d\", predLine)\n          \n          svg\n              .select(\"#draw-guess\")\n              .attr(\"x\", newX + (width - newX) / 2);\n          svg\n              .select(\"#pointer\")\n              .selectAll(\"circle\")\n                  .attr(\"cx\", newX);\n      }\n  }\n  \n  function brushended() {\n      if (!d3.event.selection) {\n          gb.call(brush.move, defaultSelection);\n      }\n\n  }\n  const gb = focus\n                  .call(brush)\n                  .call(brush.move, defaultSelection);  \n}","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport './UserPredictionChart.css';\nimport { getMostRecentPrediction, getAllDataPoints, sortDictByDate, sortStringDates, createDefaultPrediction, getLastDate } from '../../utils/data';\n\nclass UserPredictionChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\" };\n        this.chartRef = React.createRef();\n    }\n\n    componentDidMount() {\n        const userStatus = this.props.userStatus;\n        console.log(userStatus)\n        if (userStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.chartRef.current.innerHTML = \"Please log in\"\n        }\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate } = this.props;\n        var predictionData = {};//where we will store formatted userPrediction\n        const category = this.state.category;\n        var compiledData = [];\n        console.log(confirmed)\n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-01-01\");\n        const valueMax = 5000;\n        var predEndDate = null;\n        const predLength = 155;\n        var mostRecentPred = [];\n\n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = Object.keys(confirmed).map(key => ({\n            date: d3.timeParse(\"%Y-%m-%d\")(key),\n            value: confirmed[key]\n        }));\n        var predStartDate = getLastDate(confirmedData);\n\n        //store userPrediction in predictionData if it exists; parse dates and store as d3 date objects\n        if(Object.keys(userPrediction).length > 0) {\n            Object.keys(userPrediction).map(p => {\n                predictionData[p]= userPrediction[p].map(d => ({\n                    date: d3.timeParse(\"%Y-%m-%d\")((d.date).substring(0,10)),\n                    value: d.value,\n                    defined: d.defined\n                }))\n            })\n            predictionData = sortDictByDate(predictionData);\n            //get most recent prediction\n            var dates = sortStringDates(Object.keys(userPrediction));\n            const mostRecentPred = predictionData[dates[dates.length - 1]];\n            //push to compiledData\n            compiledData = [confirmedData, mostRecentPred];\n            //IMPORTANT BOUNDARIES// \n            predEndDate = mostRecentPred[mostRecentPred.length - 1].date;\n        }\n        predEndDate = !predEndDate ? d3.timeDay.offset(predStartDate, predLength) : predEndDate;\n\n        /////////////////////////////////////////////////DRAW CHART//////////////////////////////\n        //set up margin, width, height of chart\n        const legendWidth = 180;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const contextHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(this.chartRef.current)\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + contextHeight)\n                    .append(\"g\")\n                        .attr(\"transform\",\n                        \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height + 2*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (height/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n\n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([0, width]);\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var y = d3\n                    .scaleLinear()\n                    .domain([0, valueMax])\n                    .range([height, 0]);\n        var yAxis = svg\n                        .append(\"g\")\n                        .call(d3.axisLeft(y));\n        \n        //DRAW LEGEND//\n        const legendString = [\"Daily Confirmed Deaths\", \"User Prediction\"];\n        const color = d3\n                        .scaleOrdinal()\n                        .domain(legendString)\n                        .range(d3.schemeTableau10);\n        const legend = svg\n                            .append('g')\n                            .attr(\"id\", \"legend\");\n        legend\n                .selectAll(\"rect\")\n                .data(legendString)\n                .enter()\n                .append(\"circle\")\n                    .attr('cx', width + 30)\n                    .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .attr(\"r\", 6)\n                    //.attr(\"width\", size)\n                    //.attr(\"height\", size)\n                    .style(\"fill\", function(d){ return color(d)})\n        legend\n                .selectAll(\"labels\")\n                .data(legendString)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", width + 45)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    .style(\"fill\", function(d){ return color(d)})\n                    .text(function(d){ return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n        \n        //DRAW TODAY LINE//\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        console.log(today);\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        //SET UP CLIP PATH//\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n        const mainArea = svg.append(\"g\")\n                            .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        //SET UP CURVES//\n        const lineGenerator = d3.line()\n                                .curve(d3.curveCatmullRom);\n        const predLineGenerator = d3.line()\n                                    .curve(d3.curveBasis);\n        const line = lineGenerator\n                        .x(function(d) { return x(d.date) })\n                        .y(function(d) { return y(d.value) })\n        const predLine = predLineGenerator\n                            .defined(d => d.defined)\n                            .x(function(d) { return x(d.date) })\n                            .y(function(d) { return y(d.value) })\n        //DRAW CURVES//\n        var confirmedCurve = mainArea\n                                    .append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")\n                                    .datum(confirmedData)\n                                    .attr(\"d\", line)\n                                    .attr(\"stroke\", color(legendString[0]))\n\n        var predCurve = mainArea\n                                .append(\"path\")\n                                .attr(\"id\", \"prediction\")\n                                .attr(\"class\", \"line\")\n        console.log(predictionData, userPrediction)\n        if (Object.keys(userPrediction).length != 0) {\n            console.log(\"yes prediction\")\n            predCurve.datum(mostRecentPred.filter(predLine.defined()))\n                    .attr(\"d\", predLine)\n                    .attr(\"stroke\",  color(legendString[1]))\n            //SET UP TOOLTIP//\n            const tooltip = svg \n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n            tooltip\n                    .append(\"path\")\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"display\", \"none\");\n            var mousePerLine = tooltip\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n            mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d, index) {\n                            return color(legendString[index]);\n                        })\n                        .attr(\"id\", \"circle\")\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"display\", \"none\");\n            mousePerLine.append(\"text\")\n                        .attr(\"id\", \"value\")\n                        .attr(\"transform\", \"translate(10,3)\"); \n            mousePerLine.append(\"text\")\n                        .attr(\"id\", \"date\")\n                        .attr(\"text-anchor\", \"end\")\n                        .attr(\"transform\", \"rotate(-90)\")\n            \n            svg\n                    .append(\"svg:rect\")\n                        .attr('width', width)\n                        .attr('height', height)\n                        .attr(\"id\", \"interactive-area\")\n                        .attr('fill', 'none')\n                        .attr('pointer-events', 'all')\n                        .style(\"cursor\", \"pointer\")\n                        .on('mouseout', function() { // on mouse out hide line, circles and text\n                            d3.select(\"#tooltip-line\")\n                                .style(\"display\", \"none\");\n                            d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"display\", \"none\");\n                            d3.selectAll(\".mouse-per-line text\")\n                                .style(\"display\", \"none\")\n                        })\n                        .on('mouseover', function() { // on mouse in show line, circles and text\n                            d3.select(\"#tooltip-line\")\n                                .style(\"display\", \"block\");\n                        })\n                        .on('mousemove', function() { // mouse moving over canvas\n                            var todayDate = new Date();\n                            todayDate = d3.timeParse(\"%Y-%m-%d\")(todayDate.toISOString().substring(0,10));\n                            var date = x.invert(d3.mouse(this)[0])\n                            if (+date > +todayDate) {\n                                date = todayDate;\n                            }\n                            const index = d3.bisectRight(dates, date);\n                            if(predictionData[date]) {\n                                console.log(\"exists\")\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(predictionData[date].filter(predLine.defined()))\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = predictionData[date];\n                            }\n                            else {\n                                if (index === 0) {\n                                    svg\n                                        .select(\"#prediction\")\n                                        .datum([])\n                                        .attr(\"d\", predLine)\n                                    compiledData[1] = [];\n                                }\n                                else {\n                                    var newDate = dates[index - 1];\n                                    console.log(+predictionData[newDate][0].date, +date);\n                                    var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                    console.log(pred)\n                                    svg\n                                        .select(\"#prediction\")\n                                        .datum(pred.filter(predLine.defined()))\n                                        .attr(\"d\", predLine);\n                                    compiledData[1] = pred;\n                                }\n                            }\n                            mousePerLine.data(compiledData);\n                            ////////////////////\n\n\n\n                            var mouse = d3.mouse(this);\n                            var xCoord = mouse[0];\n                            d3\n                                .select(\"#tooltip-line\")\n                                .attr(\"d\", function() {\n                                    var d = \"M\" + xCoord + \",\" + height;\n                                    d += \" \" + xCoord + \",\" + 0;\n                                    return d;\n                                });\n                            d3\n                                .selectAll(\".mouse-per-line\")\n                                .attr(\"transform\", function(d, i) {\n                                    if (d.length === 0) {return;}\n                                    var date = x.invert(xCoord);\n                                    const index = d3.bisector(f => f.date).left(d, date);\n                                    var a = null;\n                                    if (index > 0) {\n                                        a = d[index - 1];\n                                    }\n                                    const b = d[index];\n                                    //d = the data object corresponding to date and value pointed by the cursors\n                                    var data = null;\n                                    if (!a) {\n                                        data = b;\n                                    }\n                                    else if (!b) {\n                                        data = a;\n                                    }\n                                    else {\n                                        data = b && (date - a.date > b.date - date) ? b : a;\n                                    }\n                                    if (+d3.timeDay.floor(date) === +data.date || +d3.timeDay.ceil(date) === +data.date) {\n                                        if (data.defined != 0) {\n                                            var element = d3.select(this)\n                                            element\n                                                    .select('#value')\n                                                    .style(\"display\", \"block\")\n                                                    .text(Math.round(data.value))\n                                                    .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                                \n                                            element\n                                                    .select(\"#date\")\n                                                    .style(\"display\", \"block\")\n                                                    .attr(\"transform\", `translate(${mouse[0] + 15}, 0) rotate(-90)`)\n                                                    .text(d3.timeFormat(\"%B %d, %Y\")(data.date));\n                                            element\n                                                    .select(\"circle\")\n                                                    .style(\"display\", \"block\")\n                                                    .attr(\"transform\", `translate(${mouse[0]}, ${y(data.value)})`);\n                                            return \"translate(0,0)\";\n                                        }\n                                    }\n                                    var element = d3.select(this)\n                                    element                \n                                        .selectAll(\"text\")\n                                            .style(\"display\", \"none\")\n                                    element\n                                            .select(\"circle\")\n                                            .style(\"display\", \"none\");\n                                });\n                        })\n                        .on(\"click\", function() {\n                            var date = x.invert(d3.mouse(this)[0])\n                            const index = d3.bisectRight(dates, date);\n                            console.log(dates)\n                            console.log(date)\n                            console.log(index)\n                            if(predictionData[date]) {\n                                console.log(\"exists\")\n                                svg\n                                    .select(\"#prediction\")\n                                    .datum(predictionData[date].filter(predLine.defined()))\n                                    .attr(\"d\", predLine)\n                                compiledData[1] = predictionData[date];\n                            }\n                            else {\n                                if (index === 0) {\n                                    svg\n                                        .select(\"#prediction\")\n                                        .datum([])\n                                        .attr(\"d\", predLine)\n                                    compiledData[1] = [];\n                                }\n                                else {\n                                    var newDate = dates[index - 1];\n                                    console.log(+predictionData[newDate][0].date, +date);\n                                    var pred = predictionData[newDate].filter(d => +d.date >= +date)\n                                    console.log(pred)\n                                    svg\n                                        .select(\"#prediction\")\n                                        .datum(pred.filter(predLine.defined()))\n                                        .attr(\"d\", predLine);\n                                    compiledData[1] = pred;\n                                }\n                            }\n                            mousePerLine.data(compiledData);\n                        })\n        }\n    }\n\n    render() {\n        return(<div ref={this.chartRef}></div>);\n    }\n}\n\nexport default UserPredictionChart;\n","import React, { Component } from 'react';\nimport UserPredictionChart from '../../components/UserPredictionChart';\nimport { cleanConfirmedData, organizeData } from '../../utils/data';\n\nclass UserPredictionChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            userPrediction: null,\n            aggregate: null,\n            userStatus: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n        });\n            fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            //const result = JSON.parse(data);\n            this.setState({ confirmed: data });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            this.setState({ aggregate: data });\n        });\n        fetch('/login-status/').then(res => res.json()).then(data => {\n            this.setState({ userStatus: data });\n            console.log(data);\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, userStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !userStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <UserPredictionChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    aggregate={aggregate}\n                    userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default UserPredictionChartContainer;","import React from 'react';\nimport UserPredictionChartContainer from '../../containers/UserPredictionChartContainer';\n\nclass ProfilePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null\n    }\n  }\n\n  componentDidMount() {\n    /*fetch('/user').then(res => res.json()).then(data => {\n      this.setState({ user: data });\n    });*/\n  }\n\n  \n\n  renderUser() {\n    return (\n      <div>\n        <h3>My Predictions</h3>\n        <UserPredictionChartContainer/>\n      </div>\n\n        /*<div>\n            <p><b>Name: </b>{ this.state.user['name'] }</p>\n            <p><b>Poll score: </b>{ this.state.user['score'] }</p>\n            <p><b>Country/Location: </b></p>\n            <p><b>Bio: </b></p>\n\n            <p>Edit your page:</p>\n            <form action='/action' method='POST'>\n            <input type=\"text\" name=\"bio\" placeholder=\"Bio...\" />\n            <input type=\"text\" name=\"location\" placeholder=\"Location...\" />\n            <button type='submit'>Create</button>\n            </form>\n          \n        </div>*/\n    );\n  }\n\n  render() {\n    const { user } = this.state;\n    //if (!user) return 'Loading...';\n\n    return (\n        <div>\n            {this.renderUser()}\n        </div>\n    );\n  }\n}\n  \nexport default ProfilePage;","import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './InteractiveChart.css';\nimport { clamp, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction, getLastDate, getLastValue } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\nimport { timeDay } from 'd3';\n\n\nclass InteractiveChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"us_daily_deaths\", predictionData: null};\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        const loginStatus = this.props.loginStatus;\n        if (loginStatus['logged in']) {\n            this.renderChart();\n        }\n        else {\n            this.renderChartUnregistered()\n        }\n    }\n    //move to utils\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n    deletePrediction(category) {\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        while(+currDate <= +predEndDate) {\n            defaultData.push({date: currDate, value: 0, defined: 0});\n            currDate = d3.timeDay.offset(currDate, 1);\n        }\n        return defaultData;\n    }\n    \n    appendModal() {\n        const signinRedirect = () => {window.location.href='/#/signin'}\n        const signupRedirect = () => {window.location.href='/#/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        this.chartRef.current.appendChild(modal);\n    }\n\n    renderChartUnregistered() {\n        var { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse } = this.props;\n        confirmedLastDate = d3.timeParse(\"%Y-%m-%d\")(confirmedLastDate);\n        // sort models by increasing error\n        var orgIndices = {};\n        for (var i = 0; i < orgs.length; i++) {\n            orgIndices[orgs[i]] = [i];\n        }\n        var sortable = [];\n        for (var err in mse) {\n            sortable.push([err, mse[err]]);\n        }\n        sortable.sort(function(a, b) {\n            return a[1] - b[1];\n        });\n        var sortedOrgs = [];\n        for (var j = 0; j < sortable.length; j++) {\n            sortedOrgs.push(sortable[j][0]); // + \" (MSE=\" + sortable[j][1].toFixed(2).toString() + \")\")\n            orgIndices[sortable[j][0]].push(j);\n        }\n\n        // correct order of forecasts\n        orgIndices = Object.values(orgIndices);\n        var tempForecast = new Array(forecast.length);\n        for (var k = 0; k < orgIndices.length; k++) {\n            tempForecast[orgIndices[k][1]] = forecast[orgIndices[k][0]];\n        }\n\n        // replace orgs and forecasts with new orders\n        orgs = sortedOrgs;\n        forecast = tempForecast;\n\n\n        var predictionData = [];//where we will store formatted userPrediction\n        const createDefaultPrediction = this.createDefaultPrediction;\n        this.appendModal();\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 380;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(\".main-chart\")\n                    // .append(\"svg\")\n                    //     .attr(\"class\", \"main-chart\")\n                        // .attr(\"viewBox\", `0 0 ${width} ${height}`)\n                        .attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom + focusHeight + 100}`)\n                        // .attr(\"width\", width)\n                        // .attr(\"height\", height)\n                    .append(\"g\")\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n                    // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0-margin.left)\n            .attr(\"x\",0 - (h / 2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed)\n        if (+getLastDate(confirmedData) != +confirmedLastDate) {\n            confirmedData.push({\n                date: confirmedLastDate,\n                value: confirmedLastVal\n            })\n        }\n        else {\n            confirmedLastVal = getLastValue(confirmedData);\n        }\n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n\n        var aggregateData = reformatData(aggregate);\n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedData[confirmedData.length - 1].date; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        var models = [];\n        orgs.map((o, i) => {\n            //var idx = o.indexOf(\"(\");\n            //models.push(o.substring(0, idx - 1));\n            models.push(o);\n        })\n        var names = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(models)\n        const modelClassNames = [\"gt\", \"ihme\", \"youyang\", \"columbia\", \"ucla\"];\n        const labels = [\"confirmed\", \"aggregate\", \"prediction\"].concat(modelClassNames);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(models)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = d3.select(\".legend-container\")\n                        .attr(\"viewBox\", \"0 0 400 500\")\n                        .append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(names)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', 10)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", (function(d){ return color(d)}))\n\n        \n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", 30)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                // .style(\"fill\", function(d, index){ return color(names[index])})\n                .text(function(d){console.log(\"D TEXT\"); console.log(d); return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date === +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        \n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\")\n                                        .attr(\"class\", \"prediction line\");\n\n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date === +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", modelClassNames[index])\n                        .style(\"stroke\", color(models[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');\n        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        //const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n\n        predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        predictionData[0].value = confirmedLastVal;\n        predictionData[0].defined = true;        \n\n        var filteredData = null;\n        //var totalData = confirmedData.concat(predictionData);\n\n//!!    //add forecast data to compiledData\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: labels[0],\n            data: confirmedData\n        })\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        compiledData.push({\n            name: labels[1],\n            data: aggregateData\n        })\n        compiledData.push({\n            name: labels[2],\n            data: predictionData\n        })\n        modelClassNames.map((m, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: m,\n                data: forecastData[index]\n            })\n        })\n\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(names[2]))\n                .style(\"stroke-width\", \"2px\")\n\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        /*svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");*/\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"1\");\n        drawingInstruction\n                        .append(\"text\")\n                        .attr(\"id\", \"draw-guess\")\n                        // .attr(\"x\", 0)             \n                        .attr(\"y\", 20)\n                        .attr(\"text-anchor\", \"middle\")  \n                        .text(\"Draw your guess\")\n                        .style(\"font-size\", \"19px\")\n                        .style(\"font-weight\", \"bold\")\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"none\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[2].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                // .style(\"stroke\", color(legendString[2]))\n                                // .style(\"stroke-width\", \"2px\")\n                        focusPredCurve.datum(filteredData)\n                                        .attr(\"d\", focusPredLine);\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        compiledData[2].data = predictionData;\n                        d3\n                            .select(\"#modal\")\n                            .style(\"display\", \"block\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"block\")\n                    });\n        \n        svg.call(drag)\n        var modal = document.getElementById(\"modal\");\n\n        window.onclick = function(event) {\n            if (event.target === modal) {\n              modal.style.display = \"none\";\n            }\n          }\n\n        //finds the datapoint closest to the mouse (along x)\n        /*var bisect = () => {\n            const bisectDate = d3.bisector(d => d.date).left;\n            return mx => {\n                const date = x.invert(mx);\n                const index = bisectDate(totalData, date, 1);\n                const a = totalData[index - 1];\n                const b = totalData[index];\n                return b && (date - a.date > b.date - date) ? b : a;\n            };\n        }*/\n\n        console.log(compiledData);\n        const tooltipArea = svg\n        .append(\"g\")\n        .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n        .attr(\"id\", \"tooltip-line\")\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"0.5px\")\n        .style(\"opacity\", \"0\");\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n            //  .style(\"background-color\", \"white\")\n            // .style(\"border\", \"solid\")\n            // .style(\"border-width\", \"2px\")\n            // .style(\"border-radius\", \"5px\")\n            // .style(\"padding\", \"5px\")\n            .style(\"position\", \"absolute\")\n            .style(\"display\", \"block\")\n            .style(\"left\", \"10px\")\n            .style(\"top\", \"10px\");\n        // tooltipBox.selectAll(\"box\")\n        //             .data(compiledData)\n        //             .enter()\n        //             .append(\"div\")\n        //             .attr(\"class\", d => d.name);    \n\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                        .selectAll(\".mouse-per-line\")\n                        .data(compiledData)\n                        .enter()\n                        .append(\"g\")\n                        .attr(\"class\", \"mouse-per-line\");\n\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, index) {\n                        return color(names[index]);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n            .append(\"svg:rect\")\n            .attr('width', width)\n            .attr('height', height)\n            .attr('fill', 'none')\n            .attr('pointer-events', 'all')\n            //.style(\"cursor\", \"pointer\")\n            .on('mouseout', function() { // on mouse out hide line, circles and text\n                d3.select(\"#tooltip-line\")\n                .style(\"opacity\", \"0\");\n                d3.selectAll(\".mouse-per-line circle\")\n                .style(\"opacity\", \"0\");\n                d3.selectAll(\".mouse-per-line text\")\n                .style(\"opacity\", \"0\")\n                tooltipBox.style(\"display\", \"none\")\n            })\n            .on('mouseover', function() { // on mouse in show line, circles and text\n                d3.select(\"#tooltip-line\")\n                .style(\"opacity\", \"1\");\n                tooltipBox.style(\"display\", \"block\")\n            })\n            .on('mousemove', function() { // mouse moving over canvas\n                var mouse = d3.mouse(this);\n                var xCoord = mouse[0];\n                var yCoord = mouse[1];\n                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                    chart.attr(\"cursor\", \"pointer\");\n                }\n                else {\n                    chart.attr(\"cursor\", \"default\");\n                }\n                d3\n                    .select(\"#tooltip-line\")\n                    .attr(\"d\", function() {\n                        var d = \"M\" + xCoord + \",\" + height;\n                        d += \" \" + xCoord + \",\" + 0;\n                        return d;\n                    });\n                tooltipBox\n                    .style('left', `${d3.event.pageX + 20}px`)\n                    .style('top', `${d3.event.pageY + 20}px`)\n                d3\n                    .selectAll(\".mouse-per-line\")\n                    .attr(\"transform\", function(d, i) {\n                        if (d.data.length === 0) {return;}\n                        var date = x.invert(xCoord);\n                        var value = -1;\n                        d.data.map(d => {\n                            if(+d.date === +d3.timeDay.round(date) && d.defined !== 0) {\n                                value = d.value;\n                            }\n                        })\n                        var element = d3.select(this);\n                        var textBox = tooltipBox.select(`.${d.name}`);\n\n                        if (value >= 0) {\n                            if(textBox.empty()) {\n                                textBox = tooltipBox.append(\"div\")\n                                                    .attr(\"class\", d.name)\n                                                    .style(\"padding-left\", \"10px\")\n                                                    .style(\"padding-right\", \"10px\")\n                                                    .style(\"background-color\", color(names[i]))\n                                                    .style(\"color\", \"white\");\n\n                            }\n                            else {\n                                textBox.html(`${names[i]}: ${Math.round(value)}`)\n                            }\n                            element.select(\"circle\")\n                                    .style(\"opacity\", \"1\");\n                            return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                        }\n                        else {\n                            if(!textBox.empty()) {\n                                textBox.remove();\n                            }\n                            element\n                                    .select(\"circle\")\n                                    .style(\"opacity\", \"0\");\n                        }\n                        \n                });\n            })\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        const focusMargin = 50;\n        var focus = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n \n        var focusX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        const focusY = d3\n                        .scaleLinear()\n                        .domain([0, yAxisMax])\n                        .range([focusHeight - margin.bottom, 0])\n                        .nice();\n        \n        var focusXAxis = focus\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(focusX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n        const focusLine = d3.line()\n                            .curve(d3.curveCatmullRom)\n                            .x(function(d) {return x(d.date)})\n                            .y(function (d) {return focusY(d.value)})\n        \n        const focusPredLine = d3.line()\n                                .curve(d3.curveBasis)\n                                .defined(d => d.defined)\n                                .x(function(d) { return focusX(d.date) })\n                                .y(function(d) { return focusY(d.value) })        \n        focus.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[0]))\n        \n        focus.append(\"path\")\n            .datum(aggregateData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[1]))\n\n        var focusPredCurve = focus.append(\"path\")\n                                    .datum(predictionData)\n                                    .attr(\"d\", focusPredLine)\n                                    .attr(\"class\", \"context-curve\")\n                                    .attr(\"stroke\", color(names[2]))\n        \n        forecastData.map((f, index) => {\n            focus\n                    .append(\"path\")\n                    .datum(f)\n                    .attr(\"d\", focusLine)\n                    .attr(\"class\", \"context-curve\")\n                    .attr(\"stroke\", color(models[index]));\n\n        })\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n                todayMarker.select(\"line\")\n                        .attr(\"x1\", x(today))\n                        .attr(\"x2\", x(today))\n                todayMarker.select(\"text\")\n                        .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n            }\n\n        }\n        const gb = focus\n                        .call(brush)\n                        .call(brush.move, defaultSelection)\n                        .on(\"click\", function() {\n                            d3.select(\".speech-bubble\").style(\"display\", \"none\");\n                        })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = d3.select(\"#delete-btn\").node()\n        deleteButton.onclick = () => {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n            focusPredCurve.datum(filtered)\n                            .attr(\"d\", focusPredLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n            compiledData[2].data = predictionData;\n        };\n        ///////////////////////////////////////////////////////////////// \n        var legendElement = document.querySelector(\"#legend\");\n        const legendCompleteWidth = legendElement.getBoundingClientRect().width;\n        const legendSingleHeight = 25;\n        var legendConfirmed = legend.append(\"rect\")\n        .attr(\"width\", legendCompleteWidth)\n        .attr(\"height\", legendSingleHeight)\n        .attr(\"x\", 0)\n        .attr(\"y\", 10)\n        .attr(\"fill\", \"none\")\n        .style(\"pointer-events\",\"visible\");\n\n        var legendAggregate = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendPrediction = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 2)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendGeorgiaTech = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 3)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendIhme = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 4)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendYouyang = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 5)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendColumbia = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 6)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendUcla = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 7)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n        \n        // var resetBtn = legend.append(\"rect\")\n        //         .attr(\"class\", \"reset-btn\")\n        //         .attr(\"width\", 100)\n        //         .attr(\"height\", 40)\n        //         .attr(\"x\", 0)\n        //         .attr(\"y\", 30 + legendSingleHeight * 8)\n        //         .attr(\"fill\", \"red\")\n        //         .style(\"pointer-events\",\"visible\")\n        //         .on(\"click\", function(){\n        //             predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        //             predictionData[0].value = confirmedLastVal;\n        //             predictionData[0].defined = true;\n        //             //update yourLine\n        //             var filtered = predictionData.filter(predLine.defined())\n        //             yourLine.datum(filtered)\n        //                     .attr('d', predLine)\n        //             focusPredCurve.datum(filtered)\n        //                             .attr(\"d\", focusPredLine)\n                            \n        //             svg\n        //                 .select(\"#drawing-instruction\")\n        //                 .style(\"opacity\", \"1\");\n        //             compiledData[2].data = predictionData;\n        //         });\n        // var resetText = legend.append(\"text\")\n        //                         .text(\"hello\")\n        //                         .attr(\"fill\", \"black\")\n        //                         .attr(\"position\", \"absolute\")\n        //                         .attr(\"x\", 0)\n        //                         .attr(\"y\", 0)\n        // resetBtn.node().innerHTML = \"  <text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle'>TEXT</text>\"\n                \n        legendConfirmed.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#confirmed\").style(\"stroke\", color(names[0]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendAggregate.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#aggregate\").style(\"stroke\", color(names[1]));\n                         })\n                         .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendPrediction.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#your-line\").style(\"stroke\", color(names[2]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendGeorgiaTech.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#gt\").style(\"stroke\", color(names[3]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendIhme.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ihme\").style(\"stroke\", color(names[4]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        legendYouyang.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#youyang\").style(\"stroke\", color(names[5]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        legendColumbia.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#columbia\").style(\"stroke\", color(names[6]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendUcla.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ucla\").style(\"stroke\", color(names[7]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        \n    }\n\n    renderChart() {\n        var { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse } = this.props;\n        confirmedLastDate = d3.timeParse(\"%Y-%m-%d\")(confirmedLastDate);\n        // sort models by increasing error\n        var orgIndices = {};\n        for (var i = 0; i < orgs.length; i++) {\n            orgIndices[orgs[i]] = [i];\n        }\n        var sortable = [];\n        for (var err in mse) {\n            sortable.push([err, mse[err]]);\n        }\n        sortable.sort(function(a, b) {\n            return a[1] - b[1];\n        });\n        var sortedOrgs = [];\n        for (var j = 0; j < sortable.length; j++) {\n            sortedOrgs.push(sortable[j][0]); // + \" (MSE=\" + sortable[j][1].toFixed(2).toString() + \")\")\n            orgIndices[sortable[j][0]].push(j);\n        }\n\n        // correct order of forecasts\n        orgIndices = Object.values(orgIndices);\n        var tempForecast = new Array(forecast.length);\n        for (var k = 0; k < orgIndices.length; k++) {\n            tempForecast[orgIndices[k][1]] = forecast[orgIndices[k][0]];\n        }\n\n        // replace orgs and forecasts with new orders\n        orgs = sortedOrgs;\n        forecast = tempForecast;\n\n        var predictionData = [];//where we will store formatted userPrediction\n        var defaultPredictionData = []\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 230;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        const titleHeight = 20;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(\".main-chart\")\n            // .append(\"svg\")\n                // .attr(\"class\", \"main-chart\")\n                // .attr(\"viewBox\", `0 0 ${width} ${height}`)\n                .attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom + focusHeight + 100}`)\n                // .attr(\"width\", width)\n                // .attr(\"height\", height)\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n\n        // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(\"COVID-19 Forecasts of Daily Deaths in the US Over Time\");\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (h/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Daily Deaths\");\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed);\n        if (+getLastDate(confirmedData) != +confirmedLastDate) {\n            confirmedData.push({\n                date: confirmedLastDate,\n                value: confirmedLastVal\n            })\n        }\n        else {\n            confirmedLastVal = getLastValue(confirmedData);\n        }\n        \n        var forecastData = forecast.map(f => {\n            return reformatData(f);\n        });\n        var aggregateData = reformatData(aggregate);\n\n        //store userPrediction in predictionData if it exists\n        if(Object.keys(userPrediction).length > 0) {\n            const mostRecentPred = getMostRecentPrediction(userPrediction);\n            predictionData = reformatPredData(mostRecentPred);\n        }\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedLastDate; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        var legendString = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(orgs);\n        var models = [];\n        orgs.map((o, i) => {\n            //var idx = o.indexOf(\"(\");\n            //models.push(o.substring(0, idx - 1));\n            models.push(o);\n        })\n        var names = [\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"].concat(models)\n        const modelClassNames = [\"gt\", \"ihme\", \"youyang\", \"columbia\", \"ucla\"];\n        const labels = [\"confirmed\", \"aggregate\", \"prediction\"].concat(modelClassNames);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(models)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = d3.select(\".legend-container\")\n                        .attr(\"viewBox\", \"0 0 400 500\")\n                        .append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(names)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', 10)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", (function(d){ return color(d)}))\n\n        \n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", 30)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                // .style(\"fill\", function(d, index){ return color(names[index])})\n                .text(function(d){console.log(\"D TEXT\"); console.log(d); return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n        var legendElement = document.querySelector(\"#legend\");\n        const legendCompleteWidth = legendElement.getBoundingClientRect().width;\n        const legendSingleHeight = 25;\n        /*var legendArea = legend.append(\"rect\")\n                                .attr(\"width\", legendCompleteWidth)\n                                .attr(\"height\", legendCompleteHeight)\n                                .attr(\"x\", width + 40)\n                                .attr(\"y\", 10)\n                                .attr(\"fill\", \"none\")\n                                .style(\"pointer-events\",\"visible\");*/\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"id\", \"prediction-rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date === +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(names[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        //display user prediction\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\")\n                                        .attr(\"class\", \"prediction line\");\n\n        \n        //display forecast data\n        forecastData.map((f, index) => {\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //check if predStartDate exists in f\n            if (f.length > 0 && +f[idxOfStartDate].date === +predStartDate) {\n                f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            }\n            else {//add data point to forecastData array\n                f.splice(idxOfStartDate, 0, {\n                    date: predStartDate,\n                    value: confirmedData[confirmedData.length - 1].value\n                });\n                f = f.slice(idxOfStartDate, f.length);\n            }\n            forecastData[index] = f;\n            predictionArea.append(\"path\")\n                        .attr(\"class\", \"forecast line\")\n                        .attr(\"id\", modelClassNames[index])\n                        .style(\"stroke\", color(models[index]))\n                        .datum(f)\n                            .attr(\"d\", line);\n        })\n        \n        var lines = document.getElementsByClassName('line');        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        //const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n        }\n\n        var filteredData = null;\n//!!    //add forecast data to compiledData\n        //get complete dataset from paths\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: labels[0],\n            data: confirmedData\n        })\n        console.log(confirmedData);\n        console.log(confirmed)\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        compiledData.push({\n            name: labels[1],\n            data: aggregateData\n        })\n        compiledData.push({\n            name: labels[2],\n            data: predictionData\n        })\n        modelClassNames.map((m, index) => {\n            var lastDate = forecastData[index][forecastData[index].length - 1].date;\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n            compiledData.push({\n                name: m,\n                data: forecastData[index]\n            })\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(names[2]))\n                .style(\"stroke-width\", \"2px\")\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"0\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            // .attr(\"x\", 0)             \n                            .attr(\"y\", 20)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"19px\")\n                            .style(\"font-weight\", \"bold\")\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        if(Object.keys(userPrediction).length === 0) {\n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"none\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[2].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                // .style(\"stroke\", color(models[2]))\n                                // .style(\"stroke-width\", \"2px\")\n                        focusPredCurve.datum(filteredData)\n                                        .attr(\"d\", focusPredLine);\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"block\")\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        compiledData[2].data = predictionData;\n                        savePrediction(predictionData, category);\n                    });\n        \n        svg.call(drag)\n        //////add tooltip//////\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n                            //  .style(\"background-color\", \"white\")\n                            // .style(\"border\", \"solid\")\n                            // .style(\"border-width\", \"2px\")\n                            // .style(\"border-radius\", \"5px\")\n                            // .style(\"padding\", \"5px\")\n                            .style(\"position\", \"absolute\")\n                            .style(\"display\", \"block\")\n                            .style(\"left\", \"10px\")\n                            .style(\"top\", \"10px\");\n        // tooltipBox.selectAll(\"box\")\n        //             .data(compiledData)\n        //             .enter()\n        //             .append(\"div\")\n        //             .attr(\"class\", d => d.name);    \n\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d, i) {\n                            return color(names[i]);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n                            .append(\"svg:rect\")\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', 'none')\n                            .attr('pointer-events', 'all')\n                            //.style(\"cursor\", \"pointer\")\n                            .on('mouseout', function() { // on mouse out hide line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"0\")\n                                tooltipBox.style(\"display\", \"none\")\n                            })\n                            .on('mouseover', function() { // on mouse in show line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                                tooltipBox.style(\"display\", \"block\")\n                            })\n                            .on('mousemove', function() { // mouse moving over canvas\n                                var mouse = d3.mouse(this);\n                                var xCoord = mouse[0];\n                                var yCoord = mouse[1];\n                                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                                    chart.attr(\"cursor\", \"pointer\");\n                                }\n                                else {\n                                    chart.attr(\"cursor\", \"default\");\n                                }\n                                d3\n                                    .select(\"#tooltip-line\")\n                                    .attr(\"d\", function() {\n                                        var d = \"M\" + xCoord + \",\" + height;\n                                        d += \" \" + xCoord + \",\" + 0;\n                                        return d;\n                                    });\n                                tooltipBox\n                                    .style('left', `${d3.event.pageX + 20}px`)\n                                    .style('top', `${d3.event.pageY + 20}px`)\n                                d3\n                                    .selectAll(\".mouse-per-line\")\n                                    .attr(\"transform\", function(d, i) {\n                                        if (d.data.length === 0) {return;}\n                                        var date = x.invert(xCoord);\n                                        var value = -1;\n                                        d.data.map(d => {\n                                            if(+d.date === +d3.timeDay.round(date) && d.defined !== 0) {\n                                                value = d.value;\n                                            }\n                                        })\n                                        var element = d3.select(this);\n                                        var textBox = tooltipBox.select(`.${d.name}`);\n\n                                        if (value >= 0) {\n                                            if(textBox.empty()) {\n                                                textBox = tooltipBox.append(\"div\")\n                                                                     .attr(\"class\", d.name)\n                                                                     .style(\"padding-left\", \"10px\")\n                                                                     .style(\"padding-right\", \"10px\")\n                                                                     .style(\"background-color\", color(names[i]))\n                                                                     .style(\"color\", \"white\");\n\n                                            }\n                                            else {\n                                                textBox.html(`${names[i]}: ${Math.round(value)}`)\n                                            }\n                                            element.select(\"circle\")\n                                                    .style(\"opacity\", \"1\");\n                                            return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                                        }\n                                        else {\n                                            if(!textBox.empty()) {\n                                                textBox.remove();\n                                            }\n\n                                            element\n                                                    .select(\"circle\")\n                                                    .style(\"opacity\", \"0\");\n                                        }\n                                        \n                                });\n                            })\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        // const focusHeight = 100;\n        const focusMargin = 50;\n        var focus = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var focusX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        const focusY = d3\n                        .scaleLinear()\n                        .domain([0, yAxisMax])\n                        .range([focusHeight - margin.bottom, 0])\n                        .nice();\n        \n        var focusXAxis = focus\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(focusX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n        const focusLine = d3.line()\n                            .curve(d3.curveCatmullRom)\n                            .x(function(d) {return x(d.date)})\n                            .y(function (d) {return focusY(d.value)})\n        \n        const focusPredLine = d3.line()\n                                .curve(d3.curveBasis)\n                                .defined(d => d.defined)\n                                .x(function(d) { return focusX(d.date) })\n                                .y(function(d) { return focusY(d.value) })        \n        focus.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[0]))\n        \n        focus.append(\"path\")\n            .datum(aggregateData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(names[1]))\n\n        var focusPredCurve = focus.append(\"path\")\n                                    .datum(predictionData)\n                                    .attr(\"d\", focusPredLine)\n                                    .attr(\"class\", \"context-curve\")\n                                    .attr(\"stroke\", color(names[2]))\n        \n        forecastData.map((f, index) => {\n            focus\n                    .append(\"path\")\n                    .datum(f)\n                    .attr(\"d\", focusLine)\n                    .attr(\"class\", \"context-curve\")\n                    .attr(\"stroke\", color(models[index]));\n\n        })\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n                todayMarker.select(\"line\")\n                        .attr(\"x1\", x(today))\n                        .attr(\"x2\", x(today))\n                todayMarker.select(\"text\")\n                        .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n                \n            }\n\n        }\n        const gb = focus\n                        .call(brush)\n                        .call(brush.move, defaultSelection)\n                        .on(\"click\", function() {\n                            d3.select(\".speech-bubble\").style(\"display\", \"none\");\n                        })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = d3.select(\"#delete-btn\").node()\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            console.log(\"deleted\")\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n            focusPredCurve.datum(filtered)\n                            .attr(\"d\", focusPredLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n            compiledData[2].data = predictionData;\n        };\n        var legendConfirmed = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendAggregate = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendPrediction = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 2)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendGeorgiaTech = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 3)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendIhme = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 4)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendYouyang = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 5)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendColumbia = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 6)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendUcla = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 7)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        legendConfirmed.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#confirmed\").style(\"stroke\", color(names[0]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendAggregate.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#aggregate\").style(\"stroke\", color(names[1]));\n                         })\n                         .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendPrediction.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#your-line\").style(\"stroke\", color(names[2]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendGeorgiaTech.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#gt\").style(\"stroke\", color(names[3]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendIhme.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ihme\").style(\"stroke\", color(names[4]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        legendYouyang.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#youyang\").style(\"stroke\", color(names[5]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n        legendColumbia.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#columbia\").style(\"stroke\", color(names[6]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(names[i]))\n                        })\n        legendUcla.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ucla\").style(\"stroke\", color(names[7]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(names[i]))\n                    })\n    }\n        \n    render() {\n        return(\n        <div>\n            <h2>US Daily Deaths</h2>\n            \n            {/*<p>Current total: {this.confirmedData.value}</p>*/}\n            <div className=\"chart\">\n                <div className=\"first-column\">\n                    <div className=\"main-instruction\">\n                        <p className=\"info\">\n                            <b>COVIDforecasts is created by academic researchers for you to compare \n                            official COVID forecasts and contribute your own. Currently we compare \n                            forecasts for U.S. daily deaths, and we hope to expand to more forecasts \n                            in the future.</b>\n                        </p>\n                        <p>> Hover over the graph to view the tooltip</p>\n                        {/* <br/> */}\n                        <p>> Hover over the legend to view individual curves</p>\n                        {/* <br/> */}\n                        <p>> Drag on the chart to draw your own prediction</p>\n                        {/* <br/> */}\n                        <p>> Click Reset to erase your prediction</p>\n                        {/* <br/> */}\n                        <p>> Navigate to <b>Top Forecasts</b> to view the accuracy of various forecasts and user predictions</p>\n                    </div>\n                </div>\n                <div ref={this.chartRef} className=\"second-column\">\n                    <svg className=\"main-chart\"></svg>\n                    {/* <div className=\"privacy\">\n                        <span className=\"bold\">Privacy</span>: User-contributed forecast data is used to create aggregate forecasts and is displayed to other visitors on the \"Top Forecasts\" page. It may also be used, anonymized, for academic research purposes. Other than that, we do not and will not share or sell any user or visitor information for any reason.\n                    </div> */}\n                </div>\n                <div className=\"third-column\">\n                    <svg className=\"legend-container\"></svg>\n                    <button className=\"btn btn-primary \" id=\"delete-btn\">Reset</button>\n                    <div class=\"speech-bubble left\">shift or resize the gray box to change the zoom level</div>\n                </div>\n            </div>\n            <div class=\"tooltip-box\"></div>\n        </div>);\n    }\n}\n\nexport default InteractiveChart;","import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport {cleanPrediction, createFocusContext, savePrediction, getLastDate, createDefaultPrediction, getLastValue, cleanData, clamp, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction } from '../../utils/data';\nimport './InteractiveChartTemp.css';\n\n\n\nclass InteractiveChartTemp extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        console.log(modal);\n        console.log(document.querySelector(\".modal\"))\n        document.querySelector(\".chart-container\").append(modal);\n    }\n\n    componentDidMount() {\n        this.props.chart.append(\"rect\")\n        this.renderChart();\n    }\n    renderChart() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn, x, y, width, height, predStartDate, xAxis, marginBottom, appendModal} = this.props;\n        console.log(marginBottom);\n        this.appendModal();\n        const predEndDate = x.domain()[1];\n        var svg = this.props.chart;\n        var confirmedData = reformatData(confirmedAvg);\n        const confirmedTemp = reformatData(confirmed);\n        const confirmedLastVal = getLastValue(confirmedTemp);\n        confirmedData.push({\n            date: getLastDate(confirmedTemp),\n            value: confirmedLastVal\n        })\n        console.log(confirmedData)\n        var aggregateData = reformatData(aggregate);\n        var forecastData = forecast.map((f)=> {\n            return cleanData(reformatData(f), predStartDate, confirmedLastVal);\n        });\n        aggregateData = cleanData(aggregateData, predStartDate, confirmedLastVal);\n        var predictionData = userPrediction;\n        var line = d3.line().curve(d3.curveCatmullRom)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        var predLine = d3.line().curve(d3.curveBasis)\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        const labels = ['User Prediction', 'Confirmed Data', 'Aggregate Data'].concat(orgs);\n        const color = d3\n            .scaleOrdinal()\n            .domain(labels)\n            .range(d3.schemeTableau10);\n        var confirmedBoundary = x(predStartDate);\n        var defs = svg\n            .append(\"defs\");\n        var confirmedClip = defs\n            .append(\"svg:clipPath\")\n                .attr(\"id\", \"confirmed-clip\")\n                .append(\"svg:rect\")\n                    .attr(\"width\", confirmedBoundary)\n                    .attr(\"height\", height)\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 0);\n        const confirmedArea = svg\n                .append('g')\n                .attr(\"clip-path\", \"url(#confirmed-clip)\");\n        var predictionClip = defs\n            .append(\"svg:clipPath\")\n                .attr(\"id\", \"prediction-clip\")\n                .append(\"svg:rect\")\n                    .attr(\"id\", \"prediction-rect\")\n                    .attr(\"width\", width - confirmedBoundary )\n                    .attr(\"height\", height)\n                    .attr(\"x\", confirmedBoundary)\n                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        var confirmedLine = confirmedArea.append(\"path\")\n            .attr(\"class\", \"confirmed line\")\n            .datum(confirmedData)    \n            .attr('d', line)\n            .style(\"stroke\", color(labels[1]))\n            .style(\"stroke-width\", \"3px\")\n        var aggregateLine = predictionArea.append(\"path\")\n            .attr(\"class\", \"aggregate line\")\n            .datum(aggregateData)    \n            .attr('d', line)\n            .style(\"stroke\", color(labels[2]))\n            .style(\"stroke-width\", \"2px\")\n        predictionArea\n            .selectAll(\".forecast\")\n            .data(forecastData)\n            .enter()\n            .append(\"path\")\n                .attr(\"d\", line)\n                .attr(\"id\", (f, index) => orgs[index])\n                .attr(\"class\", \"forecast line\")\n                .style(\"stroke\", (f, index) => color(orgs[index]))\n                .style(\"stroke-width\", \"2px\");\n        \n        ///prediction data////\n        if (loggedIn) {\n            console.log(predEndDate)\n            predictionData = getMostRecentPrediction(userPrediction);\n            console.log(predictionData);\n            if (!predictionData) {\n                predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            }\n            predictionData = cleanPrediction(predictionData, predStartDate, predEndDate, confirmedLastVal);\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n        }\n        var filteredData = predictionData.filter(predLine.defined())\n\n        var predictionLine = predictionArea.append(\"path\")\n            .attr(\"class\", \"prediction line\")\n            .datum(predictionData)\n            .attr(\"d\", predLine)\n            .style(\"stroke\", color(labels[0]))\n            .style(\"stroke-width\", \"2px\")\n        \n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\".confirmed\");\n        const aggregatePath = document.querySelector(\".aggregate\");\n        confirmedData = getAllDataPoints(confirmedPath, x, y, x.domain()[0], predStartDate);\n        aggregateData = getAllDataPoints(aggregatePath, x, y, predStartDate, getLastDate(aggregateData))\n        forecastData.map((f, index) => {\n            forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, getLastDate(f));\n        })\n        var compiledData = [predictionData, confirmedData, aggregateData].concat(forecastData);\n        /////drag/////\n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n        var drag = d3.drag()\n                        .on(\"drag\", function() {\n                        console.log('yes');\n                        //hide \"draw your guess\" text\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, y.domain()[1], y.invert(pos[1]));\n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        compiledData[0].data = predictionData;\n                        filteredData = predictionData.filter(predLine.defined())\n                        predictionLine.datum(filteredData)\n                                .attr('d', predLine)\n                                .style(\"stroke\", color(labels[0]))\n                                .style(\"stroke-width\", \"2px\")\n                        });\n                    })\n                    .on(\"end\", function () {\n                        if(!loggedIn) {\n                            d3\n                                .select(\"#modal\")\n                                .style(\"display\", \"block\");\n                        }\n                        else {\n                            var lastPredDate = getLastDate(filteredData);\n                            getDataPointsFromPath(predictionData, predictionLine.node(), x, y, lastPredDate);\n                            savePrediction(predictionData, \"us_daily_deaths\");\n                        }\n                    });\n        svg.call(drag)\n\n        var modal = document.getElementById(\"modal\");\n        window.onclick = function(event) {\n            if (event.target === modal) {\n              modal.style.display = \"none\";\n            }\n        }\n        //focus+context//\n        createFocusContext(svg, width, height, marginBottom, confirmedData, aggregateData, forecastData, predictionData, labels, x, y, xAxis, line, predLine, color);\n        ///tooltip///\n    }\n    render() {\n        console.log(this.props.chart.node());\n        return(\n            <div></div>\n        )\n    }\n}\n\nexport default InteractiveChartTemp;","import React, { Component } from 'react';\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, getLastValue, organizeData } from '../../utils/data';\n\n/*function InteractiveCharts({ dataSet, orgs, userPrediction, confirmed }) {\n    return dataSet.map((data, index) => {\n      return (\n        <InteractiveChart forecast={data} org={orgs[index]} userPrediction={userPrediction} confirmed={confirmed} />\n       );\n    })\n  }*/\n\nclass InteractiveChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forecast: null,\n            orgs: null,\n            confirmed: null,\n            confirmedLastVal: null,\n            confirmedLastDate: null,\n            userPrediction: null,\n            aggregate: null,\n            mse: null,\n            user_mse: null,\n            loginStatus: null\n        };\n    }\n\n    componentDidMount() {\n        fetch('/us-inc-deaths-forecasts').then(res => res.json()).then(data => {\n            console.log(data);\n            const [results, orgs] = organizeData(data);\n            this.setState({ forecast: results, orgs });\n            console.log(\"FETCHED DATA\");\n            console.log(results);\n            console.log(orgs);\n        });\n        fetch('/user-prediction?category=us_daily_deaths').then(res => res.json()).then(data => {\n            this.setState({ userPrediction: data });\n            console.log(\"USER PREDICTION\");\n            console.log(data);\n        });\n        fetch('/us-inc-deaths-confirmed-wk-avg').then(res => res.json()).then(data => {\n            this.setState({ confirmed: data });\n            console.log(\"CONFIRMED WEEKLY\");\n            console.log(data);\n        });\n        fetch('/us-inc-deaths-confirmed').then(res => res.json()).then(data => {\n            this.setState({ \n                confirmedLastVal: Object.values(data)[Object.values(data).length - 1],\n                confirmedLastDate: Object.keys(data)[Object.values(data).length - 1]\n             });\n        });\n        fetch('/us-agg-inc-deaths').then(res => res.json()).then(data => {\n            console.log(\"AGGREGATE\");\n            console.log(data);\n            this.setState({ aggregate: data });\n            //console.log(data);\n        });\n        fetch('/us-mse-overall').then(res => res.json()).then(data => {\n            console.log(\"FORECAST MSE\");\n            console.log(data);\n            this.setState({ mse: data });\n        });\n        fetch('/user-mse-overall').then(res => res.json()).then(data => {\n            this.setState({ user_mse: data });\n            console.log(\"USER MSE\");\n            console.log(data);\n        });\n        fetch('/login-status/').then(res => res.json()).then(data => {\n            this.setState({ loginStatus: data });\n        });\n    }\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedLastVal, confirmedLastDate, aggregate, mse, loginStatus } = this.state;\n        if (!forecast || !orgs || !userPrediction || !confirmed || !confirmedLastVal|| !confirmedLastDate || !aggregate || !mse || !loginStatus) return 'Loading...';\n\n        return (\n            <div className=\"chartContainer\">\n                <InteractiveChart\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    confirmedLastVal={confirmedLastVal}\n                    confirmedLastDate={confirmedLastDate}\n                    aggregate={aggregate}\n                    mse={mse}\n                    loginStatus={loginStatus}\n                    //userStatus={userStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default InteractiveChartContainer;","export const titles = {\n    \"us_daily_cases\": [\"US Daily Reported Cases\", \"Daily Reported Cases in the US\"],\n    \"us_daily_deaths\": [\"US Daily Deaths\", \"Daily Deaths in the US\"]\n}\n\nexport const forecastIdentifiers = {\n    'Columbia': 'columbia',\n    'Georgia Tech': 'georgia-tech',\n    'UCLA': 'ucla',\n    'IHME': 'ihme',\n    'Youyang Gu': 'youyang-gu'\n}","import React, { Component, Fragment } from 'react';\nimport * as d3 from 'd3'\nimport InteractiveChartTemp from '../InteractiveChartTemp';\n\n\nclass ParentChart extends Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n        this.state = {\n            chart: null,\n            x: null,\n            y: null,\n            width: 0,\n            height: 0,\n            confirmedStartdate: null,\n            predStartDate: null,\n            predEndDate: null,\n            xAxis: null,\n            marginBottom: 0\n\n        }\n    }\n    appendModal() {\n        const signinRedirect = () => {window.location.href='/signin'}\n        const signupRedirect = () => {window.location.href='/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        //document.querySelector(\".chart-container\").append(modal);\n    }\n\n    componentDidMount() {\n        var chart = this.setUpChart();\n        this.setState({chart: chart})\n    }\n\n    setUpChart() {\n        const { forecast, orgs, userPrediction, confirmed, aggregate, loggedIn, isProfile} = this.props;\n        const legendWidth = 380;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(Object.keys(confirmed)[0]);\n        const predStartDate = d3.timeParse(\"%Y-%m-%d\")(Object.keys(confirmed)[Object.keys(confirmed).length - 1]);\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength);\n        this.setState({confirmedStartDate: confirmedStartDate, predStartDate: predStartDate, predEndDate: predEndDate, predLength: predLength});\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        this.setState({marginBottom: margin.bottom});\n        console.log(margin.bottom, this.state.marginBottom)\n        this.setState({width: width, height: height})\n        var svg = d3.select(\".chart-container\")\n                    .append(\"svg\")\n                        .attr(\"width\", width + margin.left + margin.right + legendWidth)\n                        .attr(\"height\", height + margin.top + margin.bottom + toolTipHeight + focusHeight)\n                    .append(\"g\")\n                    .attr(\"ref\", `${this.chartRef.current}`)\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        \n        var x = d3\n                    .scaleTime()\n                    .domain([confirmedStartDate, predEndDate])\n                    .range([ 0, width ])\n                    //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        this.setState({xAxis: xAxis});\n        console.log(xAxis.node());\n        var yMax = d3.max(Object.values(confirmed));\n        forecast.map(f => {\n            var currMax = d3.max(f)\n            yMax = currMax > yMax ? currMax : yMax;\n        })\n        var y = d3.scaleLinear()\n            .domain([0, yMax])\n            .range([ height, 0 ])\n            .nice();\n        this.setState({x: x, y: y});\n\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n        return svg;\n    }\n\n    render() {\n        const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn } = this.props;\n        console.log(forecast)\n        if(!this.state.chart || !this.state.marginBottom) return \"Loading\"\n        return(\n            <Fragment>\n                {!this.props.isProfile ? \n                <h1>UserPredictionChart</h1> : \n                <InteractiveChartTemp \n                    chart={this.state.chart}\n                    forecast={forecast}\n                    orgs={orgs}\n                    userPrediction={userPrediction}\n                    confirmed={confirmed}\n                    confirmedAvg={confirmedAvg}\n                    aggregate={aggregate}\n                    loggedIn={loggedIn}\n                    x={this.state.x}\n                    y={this.state.y}\n                    width={this.state.width}\n                    height={this.state.height}\n                    predStartDate={this.state.predStartDate}\n                    xAxis={this.state.xAxis}\n                    marginBottom = {this.state.marginBottom}\n                    appendModal={this.appendModal()}\n                />}\n            </Fragment>\n        )\n    }\n}\n\nexport default ParentChart;","import React, { Component } from 'react';\nimport * as d3 from 'd3'\nimport './MainChart.css'\nimport { clamp, createDefaultPrediction, getAllDataPoints, getDataPointsFromPath, reformatData, reformatPredData, getMostRecentPrediction, getLastDate, getLastValue } from '../../utils/data';\nimport { elementType } from 'prop-types';\nimport { addDays, formatDate } from '../../utils/date';\nimport { timeDay } from 'd3';\nimport { titles, forecastIdentifiers } from '../../constants/data';\n\nclass MainChart extends Component {\n    constructor(props) {\n        super(props);\n        this.chartRef = React.createRef();\n    }\n    componentDidMount() {\n        this.renderChart()\n    }\n\n    appendModal() {\n        const signinRedirect = () => {window.location.href='/#/signin'}\n        const signupRedirect = () => {window.location.href='/#/signup'}\n        var modal = document.createElement(\"div\");\n        modal.id = \"modal\";\n        var modalContent = document.createElement(\"div\");\n        modalContent.id = \"modal-content\";\n        var text = document.createElement(\"p\");\n        text.innerText = \"Please log in to save your prediction.\";\n        var signinBtn = document.createElement(\"button\");\n        signinBtn.id = \"signin-btn\";\n        signinBtn.innerText = \"Sign In\";\n        signinBtn.onclick= signinRedirect;\n        signinBtn.className = \"btn primary-btn\";\n        var signupBtn = document.createElement(\"button\");\n        signupBtn.id = \"signup-btn\";\n        signupBtn.onclick= signupRedirect;\n        signupBtn.innerText = \"Sign Up\";\n        signupBtn.className = \"btn primary-btn\";\n\n        modalContent.appendChild(text);\n        modalContent.appendChild(signinBtn);\n        modalContent.appendChild(signupBtn);\n        modal.appendChild(modalContent);\n        this.chartRef.current.appendChild(modal);\n    }\n\n    createDefaultPrediction(predStartDate, predEndDate) {\n        var defaultData = [];\n        var currDate = predStartDate;\n        //var defined = true;\n        //var value = confirmedData[confirmedData.length - 1].value;\n        \n        //create defaultPredictionData\n        while(+currDate <= +predEndDate) {\n            defaultData.push({date: currDate, value: 0, defined: 0});\n            currDate = d3.timeDay.offset(currDate, 1);\n        }\n        return defaultData;\n    }\n\n    savePrediction(data, category) {\n        fetch('/update/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"data\": data, \"category\": category}),\n        });\n    }\n\n    deletePrediction(category) {\n        fetch('/delete/',{\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"category\": category}),\n          });\n    }\n\n    renderChart() {\n        const {compiled, loggedIn, category} = this.props;\n        const title = titles[category][0];\n        const subtitle = titles[category][1];\n        const confirmed = compiled[\"confirmed\"];\n        const forecast = compiled[\"forecast\"];\n        const aggregate = compiled[\"aggregate\"];\n        const userPrediction = compiled[\"user_prediction\"];\n        //const mse = compiled[\"mse\"];\n        if (!loggedIn) {this.appendModal()}\n        const orgs = []\n        // correct order of forecasts\n        var predictionData = [];//where we will store formatted userPrediction\n        const savePrediction = this.savePrediction;\n        const createDefaultPrediction = this.createDefaultPrediction;\n        // const category = this.state.category;\n        var compiledData = [];\n        //set up margin, width, height of chart\n        const legendWidth = 230;\n        const toolTipHeight = 50; //to make sure there's room for the tooltip when the value is 0\n        const focusHeight = 100;\n        const titleHeight = 20;\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(\".main-chart\")\n            // .append(\"svg\")\n                // .attr(\"class\", \"main-chart\")\n                // .attr(\"viewBox\", `0 0 ${width} ${height}`)\n                .attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom + focusHeight + 100}`)\n                // .attr(\"width\", width)\n                // .attr(\"height\", height)\n            .append(\"g\")\n            .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n\n        // add title\n        svg.append(\"text\")\n            .attr(\"x\", (width / 2))             \n            .attr(\"y\", -20)\n            .attr(\"text-anchor\", \"middle\")  \n            .style(\"font-size\", \"16px\") \n            .style(\"text-decoration\", \"underline\")  \n            .style(\"font-weight\", \"bold\")\n            .text(`COVID-19 Forecasts of ${subtitle} Over Time`);\n\n        const w = 710 - margin.left - margin.right;\n        const h = 360 - margin.top - margin.bottom;\n            \n        //Create X axis label   \n        svg.append(\"text\")\n            .attr(\"x\", w/2 + margin.right)\n            .attr(\"y\", h + 4*margin.bottom)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Date\");\n            \n        //Create Y axis label\n        svg.append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - margin.left)\n            .attr(\"x\", 0 - (h/2))\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(`${title}`);\n        \n        //format confirmedData, forecastData, and predictionData into a list of js objects, convert date from string to js date object\n        var confirmedData = reformatData(confirmed);\n        const confirmedLastDate = getLastDate(confirmedData);\n        const confirmedLastVal = getLastValue(confirmedData);        \n        let forecastLabels = [];\n        let forecastData = [];\n        let forecastIds = [];\n        forecast.forEach(f => {\n            console.log(f.data)\n            if (Object.keys(f.data).length > 0) {\n                let formattedData = reformatData(f.data);\n                console.log(formattedData);\n                let filtered = formattedData.filter(d => +d.date > +confirmedLastDate)\n                if (filtered.length > 0) {\n                    console.log(filtered, f.name)\n                    filtered.unshift({\"date\": confirmedLastDate, \"value\": confirmedLastVal})\n                    forecastData.push(filtered);\n                    forecastLabels.push(f.name);\n                    forecastIds.push(forecastIdentifiers[f.name]);\n                }\n            }\n        })\n        // let temp = forecast.map(f => {\n        //     return reformatData(f.data);\n        // }); \n        \n        // let tempNames = []\n        // let forecastDataTemp = []\n        // console.log(temp)\n        // let todayD3 = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        // temp.forEach((forecast, index) => {\n        //     if (forecast.length > 0) {\n        //         let filtered = forecast.filter(d => +d.date > +confirmedLastDate)\n        //         if (filtered.length > 0) {\n        //             filtered.unshift({\"date\": confirmedLastDate, \"value\": confirmedLastVal})\n        //             console.log(filtered)\n        //             forecastDataTemp.push(filtered);\n        //             tempNames.push(orgs[index]);\n        //         }\n        //     }\n        // })\n        // console.log(forecastDataTemp, tempNames)\n        var aggregateData = reformatData(aggregate);\n        console.log(forecastData, forecastLabels, forecastIds)\n\n        //store userPrediction in predictionData if it exists\n        if(Object.keys(userPrediction).length > 0) {\n            const mostRecentPred = getMostRecentPrediction(userPrediction);\n            predictionData = reformatPredData(mostRecentPred);\n        }\n  \n        //set other dates\n        const confirmedStartDate = confirmedData[4].date;\n        const predStartDate = confirmedLastDate; //last date of confirmedData\n        const predLength = 155;\n        const predEndDate = d3.timeDay.offset(predStartDate, predLength)\n        \n        //get confirmedData starting from confirmedStartDate\n        confirmedData = confirmedData.filter(d => +d.date >= +confirmedStartDate);\n\n        //draw x-axis     \n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, predEndDate])\n            .range([ 0, width ])\n            //.nice(); //rounds up/down the max and mind of x axis\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        \n        //find max val in confirmedData and forecastData to determine the max of y-axis\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var forecastMax = 0;\n        forecastData.map(f => {\n            var currMax = d3.max(f, d => {return d.value;})\n            forecastMax = currMax > forecastMax ? currMax : forecastMax;\n        })\n        var yAxisMax = Math.max(confirmedMax, forecastMax);\n        //draw y-axis\n        var y = d3.scaleLinear()\n            .domain([0, yAxisMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n   \n        //list of data displayed in graph - for legend\n        //var legendString = orgs.concat([\"Daily Confirmed Deaths\", \"Aggregate Forecast\", \"User Prediction\"]);\n        \n        var legendString = [`${title}`, \"Aggregate Forecast\", \"User Prediction\"].concat(forecastLabels);\n        var models = [];\n        orgs.map((o, i) => {\n            //var idx = o.indexOf(\"(\");\n            //models.push(o.substring(0, idx - 1));\n            models.push(o);\n        })\n        // var names = [`${title}`, \"Aggregate Forecast\", \"User Prediction\"].concat(models)\n        // let dataTitles = [`${title}`, \"Aggregate Forecast\", \"User Prediction\"].concat(models);\n        const modelClassNames = [\"gt\", \"ihme\", \"youyang\", \"columbia\", \"ucla\"];\n        // const labels = [\"confirmed\", \"aggregate\", \"prediction\"].concat(modelClassNames);\n        const compiledIds = [\"confirmed\", \"aggregate\", \"prediction\"].concat(forecastIds);\n        //color function that assigns random colors to each data\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(models)\n                        .range(d3.schemeTableau10);\n\n         //draw legend\n        var legend = d3.select(\".legend-container\")\n                        .attr(\"viewBox\", \"0 0 400 500\")\n                        .append('g')\n                        .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        legend.selectAll(\"rect\")\n            .data(legendString)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', 10)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", (function(d, i){ return color(compiledIds[i])}));\n\n        \n        legend.selectAll(\"labels\")\n            .data(legendString)\n            .enter()\n            .append(\"text\")\n                .attr(\"x\", 30)\n                .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                // .style(\"fill\", function(d, index){ return color(names[index])})\n                .text(function(d){console.log(\"D TEXT\"); console.log(d); return d})\n                    .attr(\"text-anchor\", \"left\")\n                    .style(\"alignment-baseline\", \"middle\")\n        var legendElement = document.querySelector(\"#legend\");\n        const legendCompleteWidth = legendElement.getBoundingClientRect().width;\n        const legendSingleHeight = 25;\n        /*var legendArea = legend.append(\"rect\")\n                                .attr(\"width\", legendCompleteWidth)\n                                .attr(\"height\", legendCompleteHeight)\n                                .attr(\"x\", width + 40)\n                                .attr(\"y\", 10)\n                                .attr(\"fill\", \"none\")\n                                .style(\"pointer-events\",\"visible\");*/\n\n        //create line generator for confirmed/forecast data and prediction data\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var predLineGenerator = d3.line()\n            .curve(d3.curveBasis); //curve doesn't go through all data points (it's smoothed out)\n            //d3.curveMonotoneX\n            //d3.curveBasis\n            //d3.curveCardinal\n        \n        //function that draws curve\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        \n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                            .append(\"defs\")\n                            .append(\"svg:clipPath\")\n                                .attr(\"id\", \"main-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"width\", width )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", 0)\n                                    .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n                                .append('g')\n                                .attr(\"clip-path\", \"url(#main-clip)\");\n\n        //display confirmed data\n        var confirmedLine = mainArea.append(\"path\")\n                                    .attr(\"id\", \"confirmed\")\n                                    .attr(\"class\", \"line\")    \n                                    .datum(confirmedData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(compiledIds[0]))\n                                    .style(\"stroke-width\", \"3px\")\n        var confirmedAreaEndX = x(confirmedData[confirmedData.length - 1].date);\n        var confirmedAreaEndY = y(confirmedData[confirmedData.length - 1].value);\n\n        //append clip-path for prediction curve\n        var predictionClip = svg.append(\"defs\").append(\"svg:clipPath\")\n                                .attr(\"id\", \"prediction-clip\")\n                                .append(\"svg:rect\")\n                                    .attr(\"id\", \"prediction-rect\")\n                                    .attr(\"width\", width - confirmedAreaEndX )\n                                    .attr(\"height\", height )\n                                    .attr(\"x\", confirmedAreaEndX)\n                                    .attr(\"y\", 0);\n        const predictionArea = svg.append('g')\n                            .attr(\"clip-path\", \"url(#prediction-clip)\");\n        \n        //make sure aggregateData curve stems from confiremData curve\n        var idxOfStartDate = d3.bisector(f => f.date).left(aggregateData, predStartDate);\n        //check if predStartDate exists in AD\n        if (aggregateData.length > 0 && +aggregateData[idxOfStartDate].date === +predStartDate) {\n            aggregateData[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n        }\n        else {\n            aggregateData.splice(idxOfStartDate, 0, {\n                date: predStartDate,\n                value: confirmedData[confirmedData.length - 1].value\n            });\n        }\n        aggregateData = aggregateData.splice(idxOfStartDate, aggregateData.length);\n\n        //display aggregate data\n        var aggregateLine = predictionArea.append(\"path\")\n                                    .attr(\"id\", \"aggregate\")\n                                    .attr(\"class\", \"line\")        \n                                    .datum(aggregateData)    \n                                    .attr('d', line)\n                                    .attr(\"stroke\", color(compiledIds[1]))\n                                    .style(\"stroke-width\", \"2px\")\n        //display user prediction\n        //function that generates the prediction curve\n        var predLine = predLineGenerator\n            .defined(d => d.defined)\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n\n        //append path for prediction data\n        var yourLine = predictionArea\n                                        .append(\"path\")\n                                        .attr(\"id\", \"your-line\")\n                                        .attr(\"class\", \"prediction line\");\n\n        \n        //display forecast data\n        let forecastNames = [];\n        console.log(forecastData)\n        forecastData.map((f, index) => {\n            console.log(f)\n            predictionArea.append(\"path\")\n                            .attr(\"class\", \"forecast line\")\n                            .attr(\"id\", forecastIds[index])\n                            .style(\"stroke\", color(forecastIds[index]))\n                            .datum(f)\n                                .attr(\"d\", line);\n            //make sure they all stem from the confirmed curve!\n            //var temp = d3.timeParse(\"%Y-%m-%d\")(\"2020-07-18\")\n            // if (f.length != 0) {\n            //     console.log(predStartDate)\n            //     var idxOfStartDate = d3.bisector(f => f.date).left(f, predStartDate);\n            //     console.log(idxOfStartDate)\n            //     console.log(f[idxOfStartDate])\n\n            //     //check if predStartDate exists in f\n            //     if (f.length > 0 && idxOfStartDate < f.length && +f[idxOfStartDate].date === +predStartDate) {\n            //         f[idxOfStartDate].value = confirmedData[confirmedData.length - 1].value;\n            //     }\n            //     else {//add data point to forecastData array\n            //         f.splice(idxOfStartDate, 0, {\n            //             date: predStartDate,\n            //             value: confirmedData[confirmedData.length - 1].value\n            //         });\n            //         f = f.slice(idxOfStartDate, f.length);\n            //     }\n            //     console.log(f)\n            //     forecastData[index] = f;\n            //     predictionArea.append(\"path\")\n            //                 .attr(\"class\", \"forecast line\")\n            //                 .attr(\"id\", modelClassNames[index])\n            //                 .style(\"stroke\", color(models[index]))\n            //                 .datum(f)\n            //                     .attr(\"d\", line);\n            // }\n            \n        })\n        \n        var lines = document.getElementsByClassName('line');        \n        \n        //variables used to initialize user prediction data if it doesn't exist in the db\n        var currDate = predStartDate;\n        var defined = true;\n        var value = confirmedData[confirmedData.length - 1].value;\n        //const confirmedLastVal = value; //used to make sure the first data point of prediction stays the same\n        \n        //check if userPrediction already exists in db\n        if (Object.keys(userPrediction).length > 0) {\n            predictionData = predictionData.filter(d => (+d.date >= +predStartDate) && (+d.date <= +predEndDate));\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            currDate = d3.timeDay.offset(predictionData[predictionData.length - 1].date, 1);\n            predictionData.concat(createDefaultPrediction(currDate, predEndDate));\n        }\n        else {\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n        }\n\n        var filteredData = null;\n//!!    //add forecast data to compiledData\n        //get complete dataset from paths\n        const forecastPaths = document.querySelectorAll(\".forecast\");\n        const confirmedPath = document.querySelector(\"#confirmed\");\n        const aggregatePath = document.querySelector(\"#aggregate\");\n        confirmedData = getAllDataPoints(confirmedPath, x, y, confirmedStartDate, predStartDate);\n        compiledData.push({\n            name: compiledIds[0],\n            data: confirmedData\n        })\n        console.log(confirmedData);\n        console.log(confirmed)\n        var lastDate = aggregateData[aggregateData.length - 1].date;\n        aggregateData = getAllDataPoints(aggregatePath, x, y, aggregateData[0].date, lastDate)\n        compiledData.push({\n            name: compiledIds[1],\n            data: aggregateData\n        })\n        compiledData.push({\n            name: compiledIds[2],\n            data: predictionData\n        })\n        forecastIds.map((m, index) => {\n            console.log(m, forecastData[index])\n            if (forecastData[index].length > 1) {\n                var lastDate = forecastData[index][forecastData[index].length - 1].date;\n                forecastData[index] = getAllDataPoints(forecastPaths[index], x, y, predStartDate, lastDate);\n                compiledData.push({\n                    name: m,\n                    data: forecastData[index]\n                })\n            }\n        })\n        //join data to yourLine\n        filteredData = predictionData.filter(predLine.defined())\n        yourLine.datum(filteredData)\n                .attr('d', predLine)\n                .style(\"stroke\", color(compiledIds[2]))\n                .style(\"stroke-width\", \"2px\")\n        //append new rect  \n        const mouseArea = svg.append(\"rect\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .attr(\"fill\", \"none\")\n            .attr(\"id\", \"mouse-area\")\n            .style(\"pointer-events\",\"visible\");\n\n        //append click area rect\n        var confirmedAreaWidth = confirmedLine.node().getBoundingClientRect().width; //get width of path element containing confirmed data\n        var clickAreaWidth = width - confirmedAreaWidth; //the remaining area\n        svg.append(\"rect\")\n           .attr(\"id\", \"click-area\")\n           .attr(\"width\", clickAreaWidth)\n           .attr(\"height\",height)\n           .attr(\"transform\", \"translate (\" + confirmedAreaWidth+\" 0)\")\n           .attr(\"fill\", \"none\")\n           .style(\"pointer-events\",\"visible\");\n        //var clickArea = d3.select(\"#click-area\");\n        \n        //append draw your guess text\n        const drawingInstruction = svg\n                                        .append(\"g\")\n                                        .attr(\"id\", \"drawing-instruction\")\n                                        .style(\"opacity\", \"0\");\n        drawingInstruction\n                            .append(\"text\")\n                            .attr(\"id\", \"draw-guess\")\n                            // .attr(\"x\", 0)             \n                            .attr(\"y\", 20)\n                            .attr(\"text-anchor\", \"middle\")  \n                            .text(\"Draw your guess\")\n                            .style(\"font-size\", \"19px\")\n                            .style(\"font-weight\", \"bold\")\n        //append circle at the end of confirmed curve\n        var selectCircle = drawingInstruction\n                                                .append(\"g\")\n                                                .attr(\"id\", \"pointer\");\n        var pointerCircles = [\"pulse-disk\", \"pulse-circle\", \"pulse-circle-2\"];\n        pointerCircles.map((c) => {\n        selectCircle.append(\"circle\")\n            .attr(\"class\", c)\n            .attr(\"cx\", confirmedAreaEndX)\n            .attr(\"cy\", confirmedAreaEndY)\n        })\n\n        if(Object.keys(userPrediction).length === 0) {\n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n        }\n\n        var drag = d3.drag()\n                     .on(\"drag\", function() {\n                        //hide \"draw your guess\" text\n                        svg\n                            .select(\"#drawing-instruction\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"none\")\n                        var pos = d3.mouse(this);\n                        var date = clamp(predStartDate, predEndDate, x.invert(pos[0]));\n                        var value = clamp(0, yAxisMax, y.invert(pos[1]));\n                        \n                        predictionData.forEach(function(d){\n                            if (+d3.timeDay.round(d.date) === +d3.timeDay.round(date)){\n                                d.value = value;\n                                d.defined = true\n                            }\n                        predictionData[0].value = confirmedLastVal;//make sure the prediction curve is always connected to the confirmed curve\n                        //update totalData everytime predictionData is updated\n                        compiledData[2].data = predictionData;\n                        //console.log(compiledData)\n                        /*yourLine.datum(predictionData)\n                                .attr('d', predLine)*/\n                        filteredData = predictionData.filter(predLine.defined())\n                        yourLine.datum(filteredData)\n                                .attr('d', predLine)\n                                // .style(\"stroke\", color(models[2]))\n                                // .style(\"stroke-width\", \"2px\")\n                        focusPredCurve.datum(filteredData)\n                                        .attr(\"d\", focusPredLine);\n\n                        });\n                    })\n                    .on(\"end\", function () {\n                        d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                        d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"1\");\n                        d3.select(\".tooltip-box\")\n                            .style(\"display\", \"block\")\n                        var lastPredDate = filteredData[filteredData.length - 1].date;\n                        getDataPointsFromPath(predictionData, yourLine.node(), x, y, lastPredDate);\n                        compiledData[2].data = predictionData;\n                        savePrediction(predictionData, category);\n                        if (!loggedIn) {\n                            d3.select(\"#modal\")\n                                .style(\"display\", \"block\");\n                            d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                            d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"1\");\n                            d3.select(\".tooltip-box\")\n                                .style(\"display\", \"block\")\n                        }\n                    });\n        \n        svg.call(drag)\n        var modal = document.getElementById(\"modal\");\n\n        window.onclick = function(event) {\n            if (event.target === modal) {\n              modal.style.display = \"none\";\n            }\n          }\n        //////add tooltip//////\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n                            //  .style(\"background-color\", \"white\")\n                            // .style(\"border\", \"solid\")\n                            // .style(\"border-width\", \"2px\")\n                            // .style(\"border-radius\", \"5px\")\n                            // .style(\"padding\", \"5px\")\n                            .style(\"position\", \"absolute\")\n                            .style(\"display\", \"block\")\n                            .style(\"left\", \"10px\")\n                            .style(\"top\", \"10px\");\n        // tooltipBox.selectAll(\"box\")\n        //             .data(compiledData)\n        //             .enter()\n        //             .append(\"div\")\n        //             .attr(\"class\", d => d.name);    \n\n        //console.log(compiledData)\n        var mousePerLine = tooltipArea\n                                        .selectAll(\".mouse-per-line\")\n                                        .data(compiledData)\n                                        .enter()\n                                        .append(\"g\")\n                                        .attr(\"class\", \"mouse-per-line\");\n        \n        mousePerLine.append(\"circle\")\n                        .attr(\"r\", 2)\n                        .style(\"stroke\", function(d, i) {\n                            return color(compiledIds[i]);\n                        })\n                        .style(\"fill\", \"none\")\n                        .style(\"stroke-width\", \"1px\")\n                        .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n                            .append(\"svg:rect\")\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', 'none')\n                            .attr('pointer-events', 'all')\n                            //.style(\"cursor\", \"pointer\")\n                            .on('mouseout', function() { // on mouse out hide line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line circle\")\n                                .style(\"opacity\", \"0\");\n                                d3.selectAll(\".mouse-per-line text\")\n                                .style(\"opacity\", \"0\")\n                                tooltipBox.style(\"display\", \"none\")\n                            })\n                            .on('mouseover', function() { // on mouse in show line, circles and text\n                                d3.select(\"#tooltip-line\")\n                                .style(\"opacity\", \"1\");\n                                tooltipBox.style(\"display\", \"block\")\n                            })\n                            .on('mousemove', function() { // mouse moving over canvas\n                                var mouse = d3.mouse(this);\n                                var xCoord = mouse[0];\n                                var yCoord = mouse[1];\n                                const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                                if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                                    chart.attr(\"cursor\", \"pointer\");\n                                }\n                                else {\n                                    chart.attr(\"cursor\", \"default\");\n                                }\n                                d3\n                                    .select(\"#tooltip-line\")\n                                    .attr(\"d\", function() {\n                                        var d = \"M\" + xCoord + \",\" + height;\n                                        d += \" \" + xCoord + \",\" + 0;\n                                        return d;\n                                    });\n                                tooltipBox\n                                    .style('left', `${d3.event.pageX + 20}px`)\n                                    .style('top', `${d3.event.pageY + 20}px`)\n                                d3\n                                    .selectAll(\".mouse-per-line\")\n                                    .attr(\"transform\", function(d, i) {\n                                        if (d.data.length === 0) {return;}\n                                        var date = x.invert(xCoord);\n                                        var value = -1;\n                                        d.data.map(d => {\n                                            if(+d.date === +d3.timeDay.round(date) && d.defined !== 0) {\n                                                value = d.value;\n                                            }\n                                        })\n                                        var element = d3.select(this);\n                                        var textBox = tooltipBox.select(`.${d.name}`);\n\n                                        if (value >= 0) {\n                                            if(textBox.empty()) {\n                                                textBox = tooltipBox.append(\"div\")\n                                                                     .attr(\"class\", d.name)\n                                                                     .style(\"padding-left\", \"10px\")\n                                                                     .style(\"padding-right\", \"10px\")\n                                                                     .style(\"background-color\", color(compiledIds[i]))\n                                                                     .style(\"color\", \"white\");\n\n                                            }\n                                            else {\n                                                textBox.html(`${legendString[i]}: ${Math.round(value)}`)\n                                            }\n                                            element.select(\"circle\")\n                                                    .style(\"opacity\", \"1\");\n                                            return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                                        }\n                                        else {\n                                            if(!textBox.empty()) {\n                                                textBox.remove();\n                                            }\n\n                                            element\n                                                    .select(\"circle\")\n                                                    .style(\"opacity\", \"0\");\n                                        }\n                                        \n                                });\n                            })\n        ////ADD TODAY LINE/////////////////////////////////////////////////////\n        const today = d3.timeParse(\"%Y-%m-%d\")(new Date().toISOString().substring(0,10));\n        var todayMarker = svg\n                            .append(\"g\")\n                            .attr(\"id\", \"today-marker\")\n        todayMarker\n                    .append(\"line\")\n                    .attr(\"id\", \"today-line\")\n                    .attr(\"x1\", x(today))\n                    .attr(\"x2\", x(today))\n                    .attr(\"y1\", 0)\n                    .attr(\"y2\", height)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1)\n                    .attr(\"stroke-dasharray\", \"8, 8\")\n        todayMarker\n                    .append(\"text\")\n                    .attr(\"id\", \"today-text\")\n                    .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n                    .text(\"Today\")\n                    .style(\"text-anchor\", \"end\")\n\n        /////////////////////////////////////////////////////////////////////////////////////////////\n        // const focusHeight = 100;\n        const focusMargin = 50;\n        var focus = svg\n                            .append(\"g\")\n                                .attr(\"viewBox\", [0, 0, width, focusHeight])\n                                .attr(\"transform\", `translate(0,${height + focusMargin} )`)\n                                //.attr(\"width\", width + 100)\n                                //.attr(\"height\", height)\n                                .style(\"display\", \"block\")\n\n\n\n        /*const xAxis = (g, x, height) => g\n                                            .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n                                            .call(d3.axisBottom(x))*/\n\n        var focusX = d3\n                            .scaleTime()\n                            .domain([confirmedStartDate, predEndDate])\n                            .range([0, width]);\n        const focusY = d3\n                        .scaleLinear()\n                        .domain([0, yAxisMax])\n                        .range([focusHeight - margin.bottom, 0])\n                        .nice();\n        \n        var focusXAxis = focus\n                                    .append(\"g\")\n                                    .attr(\"transform\", `translate(0,${focusHeight - margin.bottom})`)\n                                    .call(d3.axisBottom(focusX));\n        const brush = d3.brushX()\n                        .extent([[0, 0], [width, focusHeight - margin.bottom]])\n                        .on(\"brush\", brushed)\n                        .on(\"end\", brushended);\n\n        const defaultSelection = [x(d3.timeMonth.offset(x.domain()[1], -8)), x.range()[1]];\n    \n        /*context.append(\"g\")\n                .call(xAxis, x, focusHeight);*/\n        const focusLine = d3.line()\n                            .curve(d3.curveCatmullRom)\n                            .x(function(d) {return x(d.date)})\n                            .y(function (d) {return focusY(d.value)})\n        \n        const focusPredLine = d3.line()\n                                .curve(d3.curveBasis)\n                                .defined(d => d.defined)\n                                .x(function(d) { return focusX(d.date) })\n                                .y(function(d) { return focusY(d.value) })        \n        focus.append(\"path\")\n            .datum(confirmedData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(compiledIds[0]))\n        \n        focus.append(\"path\")\n            .datum(aggregateData)\n            .attr(\"d\", focusLine)\n            .attr(\"class\", \"context-curve\")\n            .attr(\"stroke\", color(compiledIds[1]))\n\n        var focusPredCurve = focus.append(\"path\")\n                                    .datum(predictionData)\n                                    .attr(\"d\", focusPredLine)\n                                    .attr(\"class\", \"context-curve\")\n                                    .attr(\"stroke\", color(compiledIds[2]))\n        \n        forecastData.map((f, index) => {\n            focus\n                    .append(\"path\")\n                    .datum(f)\n                    .attr(\"d\", focusLine)\n                    .attr(\"class\", \"context-curve\")\n                    .attr(\"stroke\", color(forecastIds[index]));\n\n        })\n        function brushed() {\n            if (d3.event.selection) {\n                var extent = d3.event.selection;\n                //console.log([ contextX.invert(extent[0]), contextX.invert(extent[1]) ]);\n                x.domain([ focusX.invert(extent[0]), focusX.invert(extent[1]) ]);\n                xAxis\n                        //.transition()\n                        //.duration(1000)\n                        .call(d3.axisBottom(x))\n                var newX = x(confirmedData[confirmedData.length - 1].date);\n                newX = newX < 0 ? 0 : newX;\n                d3\n                    .select(\"#prediction-clip\")\n                    .select(\"rect\")\n                        .attr(\"width\", width - newX)\n                        .attr(\"x\", newX);\n\n                svg\n                    .selectAll(\".line\")\n                    //.transition()\n                    //.duration(1000)\n                    .attr('d', line)\n\n                svg\n                    .select(\"#your-line\")\n                    .attr(\"d\", predLine)\n                \n                //reposition draw your guess text and pointer\n                svg\n                    .select(\"#draw-guess\")\n                    .attr(\"x\", newX + (width - newX) / 2);\n                svg\n                    .select(\"#pointer\")\n                    .selectAll(\"circle\")\n                        .attr(\"cx\", newX);\n                todayMarker.select(\"line\")\n                        .attr(\"x1\", x(today))\n                        .attr(\"x2\", x(today))\n                todayMarker.select(\"text\")\n                        .attr(\"transform\", `translate(${x(today) + 17}, 0) rotate(-90)`)\n\n            }\n        }\n        \n        function brushended() {\n            if (!d3.event.selection) {\n                gb.call(brush.move, defaultSelection);\n                \n            }\n\n        }\n        const gb = focus\n                        .call(brush)\n                        .call(brush.move, defaultSelection)\n                        .on(\"click\", function() {\n                            d3.select(\".speech-bubble\").style(\"display\", \"none\");\n                        })\n        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        var deleteButton = d3.select(\"#delete-btn\").node()\n        deleteButton.onclick = () => {\n            this.deletePrediction(category)\n            console.log(\"deleted\")\n            predictionData = createDefaultPrediction(predStartDate, predEndDate);\n            predictionData[0].value = confirmedLastVal;\n            predictionData[0].defined = true;\n            //update yourLine\n            var filtered = predictionData.filter(predLine.defined())\n            yourLine.datum(filtered)\n                    .attr('d', predLine)\n            focusPredCurve.datum(filtered)\n                            .attr(\"d\", focusPredLine)\n                    \n            svg\n                .select(\"#drawing-instruction\")\n                .style(\"opacity\", \"1\");\n            compiledData[2].data = predictionData;\n        };\n        var legendConfirmed = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendAggregate = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendPrediction = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 2)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendGeorgiaTech = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 3)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendIhme = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 4)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendYouyang = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 5)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendColumbia = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 6)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        var legendUcla = legend.append(\"rect\")\n                .attr(\"width\", legendCompleteWidth)\n                .attr(\"height\", legendSingleHeight)\n                .attr(\"x\", 0)\n                .attr(\"y\", 10 + legendSingleHeight * 7)\n                .attr(\"fill\", \"none\")\n                .style(\"pointer-events\",\"visible\");\n\n        legendConfirmed.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#confirmed\").style(\"stroke\", color(compiledIds[0]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(compiledIds[i]))\n                        })\n        legendAggregate.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#aggregate\").style(\"stroke\", color(compiledIds[1]));\n                         })\n                         .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(compiledIds[i]))\n                        })\n        legendPrediction.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#your-line\").style(\"stroke\", color(compiledIds[2]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(compiledIds[i]))\n                        })\n        legendGeorgiaTech.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#gt\").style(\"stroke\", color(compiledIds[3]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(compiledIds[i]))\n                        })\n        legendIhme.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ihme\").style(\"stroke\", color(compiledIds[4]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(compiledIds[i]))\n                    })\n        legendYouyang.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#youyang\").style(\"stroke\", color(compiledIds[5]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(compiledIds[i]))\n                    })\n        legendColumbia.on(\"mouseover\", function() {\n                            svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                            svg.select(\"#columbia\").style(\"stroke\", color(compiledIds[6]));\n                        })\n                        .on(\"mouseout\", function() {\n                            svg.selectAll(\".line\")\n                                .style(\"stroke\", (d, i) => color(compiledIds[i]))\n                        })\n        legendUcla.on(\"mouseover\", function() {\n                        svg.selectAll(\".line\").style(\"stroke\", \"#ddd\");\n                        svg.select(\"#ucla\").style(\"stroke\", color(compiledIds[7]));\n                    })\n                    .on(\"mouseout\", function() {\n                        svg.selectAll(\".line\")\n                            .style(\"stroke\", (d, i) => color(compiledIds[i]))\n                    })\n    }\n    renderOldChart() {\n        const {compiled, loggedIn} = this.props;\n        const confirmed = compiled[\"confirmed\"];\n        const forecast = compiled[\"forecast\"];\n        const aggregate = compiled[\"aggregate\"];\n        const userPrediction = compiled[\"user_prediction\"]\n        var margin = {top: 20, right: 30, bottom: 20, left: 60},\n            width = 800 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n        var svg = d3.select(\".main-chart\")\n                    .attr(\"viewBox\", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom + 100}`)\n                    .append(\"g\")\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top + 20} )`);\n        var confirmedData = reformatData(confirmed);\n        var compiledData = [confirmedData]\n\n        const confirmedStartDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-04-12\");\n        const confirmedEndDate = d3.timeParse(\"%Y-%m-%d\")(\"2020-09-17\");\n        var x = d3.scaleTime()\n            .domain([confirmedStartDate, confirmedEndDate])\n            .range([ 0, width ])\n\n        var xAxis = svg\n                        .append(\"g\")\n                        .attr(\"transform\", \"translate(0,\" + height + \")\")\n                        .call(d3.axisBottom(x));\n        var confirmedMax = d3.max(confirmedData, function(d) { return +d.value; });\n        var y = d3.scaleLinear()\n            .domain([0, confirmedMax])\n            .range([ height, 0 ])\n            .nice();\n        svg\n            .append(\"g\")\n            .call(d3.axisLeft(y));\n        var lineGenerator = d3.line()\n            //.curve(d3.curveBasis);\n            .curve(d3.curveCatmullRom)//curve that goes through all data points\n        var line = lineGenerator\n            .x(function(d) { return x(d.date) })\n            .y(function(d) { return y(d.value) })\n        //area where the confirmed curve will be drawn\n        var mainClip = svg\n                        .append(\"defs\")\n                        .append(\"svg:clipPath\")\n                            .attr(\"id\", \"main-clip\")\n                            .append(\"svg:rect\")\n                                .attr(\"width\", width )\n                                .attr(\"height\", height )\n                                .attr(\"x\", 0)\n                                .attr(\"y\", 0);\n\n        // Create the confirmed area variable\n        const mainArea = svg\n             .append('g')\n             .attr(\"clip-path\", \"url(#main-clip)\");\n        \n        // Create the confirmed area variable\n        const names = [\"Confirmed Cases\"]\n        var confirmedLine = mainArea.append(\"path\")\n                            .attr(\"id\", \"confirmed\")\n                            .attr(\"class\", \"line confirmed\")    \n                            .datum(confirmedData)    \n                            .attr('d', line)\n                            .attr(\"fill\", \"none\")\n                            .attr(\"stroke\", \"steelblue\")\n                            .attr(\"stroke-width\", 1.5)\n        var legend = d3.select(\".legend-container\")\n                            .attr(\"viewBox\", \"0 0 400 500\")\n                            .append('g')\n                            .attr(\"id\", \"legend\")\n        var size = 10;\n        const legendMarginL = 30;\n        var color = d3\n                        .scaleOrdinal()\n                        .domain(names)\n                        .range(d3.schemeTableau10);\n        legend.selectAll(\"rect\")\n            .data(names)\n            .enter()\n            .append(\"circle\")\n                .attr('cx', 10)\n                .attr(\"cy\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                .attr(\"r\", 6)\n                //.attr(\"width\", size)\n                //.attr(\"height\", size)\n                .style(\"fill\", (function(d){ return color(d)}))\n        legend.selectAll(\"labels\")\n                .data(names)\n                .enter()\n                .append(\"text\")\n                    .attr(\"x\", 30)\n                    .attr(\"y\", function(d,i){ return 20 + i*25}) // 100 is where the first dot appears. 25 is the distance between dots\n                    // .style(\"fill\", function(d, index){ return color(names[index])})\n                    .text(function(d){return d})\n                        .attr(\"text-anchor\", \"left\")\n                        .style(\"alignment-baseline\", \"middle\")\n        ////////////tooltip stuff////////////\n        const tooltipArea = svg\n                                .append(\"g\")\n                                .attr(\"class\", \"tooltip\")\n\n        tooltipArea.append(\"path\") //vertical line\n                    .attr(\"id\", \"tooltip-line\")\n                    .style(\"stroke\", \"black\")\n                    .style(\"stroke-width\", \"0.5px\")\n                    .style(\"opacity\", \"0\");\n        //where text will be\n        var tooltipBox = d3.select(\".tooltip-box\")\n                            .style(\"position\", \"absolute\")\n                            .style(\"display\", \"block\")\n                            .style(\"left\", \"10px\")\n                            .style(\"top\", \"10px\");\n        var mousePerLine = tooltipArea\n                            .selectAll(\".mouse-per-line\")\n                            .data(compiledData)\n                            .enter()\n                            .append(\"g\")\n                            .attr(\"class\", \"mouse-per-line\");\n\n        mousePerLine.append(\"circle\")\n                    .attr(\"r\", 2)\n                    .style(\"stroke\", function(d, i) {\n                        return color(names[i]);\n                    })\n                    .style(\"fill\", \"none\")\n                    .style(\"stroke-width\", \"1px\")\n                    .style(\"opacity\", \"0\");\n\n        var chart = tooltipArea\n                        .append(\"svg:rect\")\n                        .attr('width', width)\n                        .attr('height', height)\n                        .attr('fill', 'none')\n                        .attr('pointer-events', 'all')\n                        //.style(\"cursor\", \"pointer\")\n                        .on('mouseout', function() { // on mouse out hide line, circles and text\n                            d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"0\");\n                            d3.selectAll(\".mouse-per-line circle\")\n                            .style(\"opacity\", \"0\");\n                            d3.selectAll(\".mouse-per-line text\")\n                            .style(\"opacity\", \"0\")\n                            tooltipBox.style(\"display\", \"none\")\n                        })\n                        .on('mouseover', function() { // on mouse in show line, circles and text\n                            d3.select(\"#tooltip-line\")\n                            .style(\"opacity\", \"1\");\n                            tooltipBox.style(\"display\", \"block\")\n                        })\n                        .on('mousemove', function() { // mouse moving over canvas\n                            var mouse = d3.mouse(this);\n                            var xCoord = mouse[0];\n                            var yCoord = mouse[1];\n                            const xLowerBoundary = x(confirmedData[confirmedData.length - 1].date)\n                            // if (xCoord > xLowerBoundary && xCoord < width && yCoord > 0 && yCoord < height) {\n                            //     chart.attr(\"cursor\", \"pointer\");\n                            // }\n                            // else {\n                            //     chart.attr(\"cursor\", \"default\");\n                            // }\n                            d3\n                                .select(\"#tooltip-line\")\n                                .attr(\"d\", function() {\n                                    var d = \"M\" + xCoord + \",\" + height;\n                                    d += \" \" + xCoord + \",\" + 0;\n                                    return d;\n                                });\n                            tooltipBox\n                                .style('left', `${d3.event.pageX + 20}px`)\n                                .style('top', `${d3.event.pageY + 20}px`)\n                            d3\n                                .selectAll(\".mouse-per-line\")\n                                .attr(\"transform\", function(d, i) {\n                                    if (d.length === 0) {return;}\n                                    var date = x.invert(xCoord);\n                                    var value = -1;\n                                    d.map(d => {\n                                        if(+d.date === +d3.timeDay.round(date) && d.defined !== 0) {\n                                            value = d.value;\n                                        }\n                                    })\n                                    var element = d3.select(this);\n                                    var textBox = tooltipBox.select(`.confirmed`);\n\n                                    if (value >= 0) {\n                                        if(textBox.empty()) {\n                                            textBox = tooltipBox.append(\"div\")\n                                                                .attr(\"class\", \"confirmed\")\n                                                                .style(\"padding-left\", \"10px\")\n                                                                .style(\"padding-right\", \"10px\")\n                                                                .style(\"background-color\", color(names[i]))\n                                                                .style(\"color\", \"white\");\n\n                                        }\n                                        else {\n                                            textBox.html(`${names[i]}: ${Math.round(value)}`)\n                                        }\n                                        element.select(\"circle\")\n                                                .style(\"opacity\", \"1\");\n                                        return \"translate(\" + mouse[0] + \",\" + y(value)+\")\";\n                                    }\n                                    else {\n                                        if(!textBox.empty()) {\n                                            textBox.remove();\n                                        }\n\n                                        element\n                                                .select(\"circle\")\n                                                .style(\"opacity\", \"0\");\n                                    }\n                                    \n                            });\n                        })\n    }\n    render() {\n        const title = titles[this.props.category][0];\n        return (\n            <div>\n            <h2>{title}</h2>\n            <div className=\"chart\">\n                <div className=\"first-column\">\n                    <div className=\"main-instruction\">\n                        <p className=\"info\">\n                            <b>COVIDforecasts is created by academic researchers for you to compare \n                            official COVID forecasts and contribute your own. Currently we compare \n                            forecasts for U.S. daily deaths, and we hope to expand to more forecasts \n                            in the future.</b>\n                        </p>\n                        <p>> Hover over the graph to view the tooltip</p>\n                        {/* <br/> */}\n                        <p>> Hover over the legend to view individual curves</p>\n                        {/* <br/> */}\n                        <p>> Drag on the chart to draw your own prediction</p>\n                        {/* <br/> */}\n                        <p>> Click Reset to erase your prediction</p>\n                        {/* <br/> */}\n                        <p>> Navigate to <b>Top Forecasts</b> to view the accuracy of various forecasts and user predictions</p>\n                    </div>\n                </div>\n                <div ref={this.chartRef} className=\"second-column\">\n                    <svg className=\"main-chart\"></svg>\n                    {/* <div className=\"privacy\">\n                        <span className=\"bold\">Privacy</span>: User-contributed forecast data is used to create aggregate forecasts and is displayed to other visitors on the \"Top Forecasts\" page. It may also be used, anonymized, for academic research purposes. Other than that, we do not and will not share or sell any user or visitor information for any reason.\n                    </div> */}\n                </div>\n                <div className=\"third-column\">\n                    <svg className=\"legend-container\"></svg>\n                    <button className=\"btn btn-primary \" id=\"delete-btn\">Reset</button>\n                    <div className=\"speech-bubble left\">shift or resize the gray box to change the zoom level</div>\n                </div>\n            </div>\n            <div className=\"tooltip-box\"></div>\n        </div>);\n    }\n}\nexport default MainChart;","import React from 'react';\nimport ParentChart from '../../components/ParentChart';\nimport MainChart from '../../components/MainChart';\nimport { cleanForecastData, organizeData } from '../../utils/data';\nimport { Spinner } from 'react-bootstrap';\n\nclass ChartContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      compiledData: null,\n      length: 0,\n      loggedIn: null,\n      category: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    const {compiledData, category} = this.props;\n    console.log(category)\n    let allData = {}\n    this.setState({compiledData: allData, category: category})\n    compiledData.map(async function(d) {\n      const name = d.name;\n      const data = d.data;\n      fetch(data).then(res => res.json()).then(data => {\n        console.log(d.name, data)\n        if (name === \"forecast\") {\n          console.log(\"forecast\")\n          data = cleanForecastData(data)\n        }\n        allData[name] = data;\n        this.setState(prevState => {\n          return {length: prevState.length + 1}\n        })\n        console.log(\"here \", this.state.length);\n      });\n    }.bind(this))\n\n    fetch('/login-status/').then(res => res.json()).then(data => {\n      this.setState({ loggedIn: data['logged in'] });\n    });\n  }\n\n  async fetchData(dataList) {\n    let allData = {}\n    dataList.map(async function(d){\n      const data = await fetch(d.data);\n      let jsonData = await data.json();\n      console.log(jsonData);\n      if (d.name === \"forecast\") {\n        console.log(\"forecast\")\n        jsonData = cleanForecastData(jsonData)\n        console.log(\"forecast!! \", jsonData)\n      }\n      allData[d.name] = data\n    })\n    console.log(\"allData!! \", allData);\n    return allData;\n  }\n\n  render() {\n    // const { forecast, orgs, userPrediction, confirmed, confirmedAvg, aggregate, loggedIn } = this.state;\n    // if (!forecast || !orgs || !userPrediction || !confirmed || !aggregate || !loggedIn) return 'Loading...';\n    const {compiledData, length, loggedIn, category} = this.state;\n    console.log(compiledData, loggedIn, length);\n\n    if (!compiledData || length !== 5 || loggedIn == null) return \"Loading...\"\n    else {\n      console.log(compiledData, loggedIn, length);\n    }\n\n    return (\n      <MainChart compiled={compiledData} loggedIn={loggedIn} category={category}/>\n    );\n  }\n}\n\nexport default ChartContainer;\n","import React from \"react\";\nimport L from \"leaflet\";\nimport statesData from './us-states.json';\nimport countriesData from './countries.json';\n//import './map.css'\n\nconst style = {\n  width: \"100%\",\n  height: \"600px\"\n};\n\nconst mapStyle = (feature) => {\n  return ({\n    weight: 2,\n    opacity: 1,\n    color: \"white\",\n    dashArray: \"3\",\n    fillOpacity: 0.7,\n    fillColor: \"#FFEDA0\"\n\n  });\n}\n\nclass Mapportal extends React.Component {\n  componentDidMount() {\n    // create map\n    this.map = L.map(\"map\", {\n      center: [37.8, -96],\n      zoom: 4,\n      layers: [\n        L.tileLayer(\"https://api.mapbox.com/styles/v1/mapbox/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoicmFjaGVsb21ib2siLCJhIjoiY2tjODZ6c3UzMTh3ZTJyb2JndHN0dXhlOSJ9.h8aubFClamI3kiUsjIgNTg\",\n        {\n          maxZoom: 18,\n          attribution:\n            'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, <a href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"http://mapbox.com\">Mapbox</a>',\n          id: \"dark-v10\"\n        })\n      ]\n    });\n\n    this.geojson = L.geoJson(statesData, {\n      style: mapStyle,\n      onEachFeature: this.onEachFeature\n    }).addTo(this.map);\n\n    this.countries = L.geoJson(countriesData, {\n\t\tstyle: mapStyle,\n\t\tonEachFeature: this.onEachFeature\n    }).addTo(this.map);\n    \n    var overlay = {\n\t\t\t\"Countries\": this.countries,\n\t\t\t\"States\" : this.geojson\n\t};\n  L.control.layers(overlay).addTo(this.map);\n\n\n    // add layer\n    this.layer = L.layerGroup().addTo(this.map);\n  }\n  onEachFeature = (feature, layer) => {\n\tlayer.bindTooltip(feature.properties.name.toString(),{noHide:true}).openTooltip();\n    layer.on({\n      mouseover: this.highlightFeature,\n      mouseout: this.resetHighlight\n    });\n    layer.on(\"click\",function(e){\n      // this gets the id for each country, and we can use that to redirect to different pages since each \n      // json layer has different ids. the states are 1-50, and the countries are their official code\n      window.alert(layer.feature.id);\n  });\n  }\n  highlightFeature = (e) => {\n    var layer = e.target;\n\n    layer.setStyle({\n      fillColor: \"#FFEDA0\",\n      weight: 5,\n      color: \"#666\",\n      dashArray: \"\",\n      fillOpacity: 0.7\n    });\n\n    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\n      layer.bringToFront();\n    }\n    //layer.bringToFront();\n\n  \n  }\n  resetHighlight = (event) => {\n\tthis.geojson.resetStyle(event.target);\n\tthis.countries.resetStyle(event.target);\n  }\n\n  render() {\n    return <div id=\"map\" style={style} />;\n  }\n}\n\nexport default Mapportal;\n","import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './Login.css';\nimport { Redirect } from \"react-router\";\n\n\nclass Login extends React.Component{\n    constructor(props) {\n      super(props)\n      this.state = { username: '', password: '', loggedinstate: '', loginStatus: false }\n    }  \n      \n    componentDidMount(){\n      //this.isLoggedIn();\n    }\n\n    saveLogin(username, password) {\n      return new Promise((resolve, reject) => {\n        fetch('/login/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"username\": username, \"password\": password}),\n        });\n        resolve();\n      })\n        \n    }\n\n    wasSucess = () => {\n      return new Promise((resolve, reject) => {\n        fetch('/login/',{ method: 'GET'})\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          this.setState({loginStatus: data['status']});\n          resolve(data);\n        });\n      })\n    }\n    \n\n    updateLoginState = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          fetch('/login-status/')\n          .then((response) => response.json())\n          .then((data) => {\n            this.setState({loginStatus: data['logged in']});\n            console.log(data['logged in']);\n            resolve(data['logged in']);\n          });\n        }, 200)\n      })\n\t\t}\n\n    handleChange(event) {\n      let name = event.target.name;\n      if (name === 'username'){\n        this.setState({ username: event.target.value});\n      }\n      if (name === 'password'){\n        this.setState({ password: event.target.value});\n      }\n  \n    }\n    \n    async handleSubmit(event) {\n      console.log(\"submitting\");\n      event.preventDefault();\n      await this.saveLogin(this.state.username, this.state.password);\n      /*await this.wasSucess().then(status => {\n        console.log(status);\n      });*/\n      await this.updateLoginState();\n    }\n\n\n    render() {\n      if (this.state.loginStatus) {\n        //return <Redirect to=\"/\" />\n        window.location.href ='/';\n      }\n      return (\n        <form onSubmit={this.handleSubmit.bind(this)} className='form-group'>\n          <h1>Sign In</h1>\n          <label className='spanStyle'><b>Username</b></label>\n          <br></br>\n          <input\n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange.bind(this)}\n            name='username'\n          />\n          <br></br>\n          <span className='spanStyle'><b>Password</b></span>\n          <br></br>\n          <input\n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange.bind(this)}\n            name='password'\n            required\n          />\n          <br></br>\n            \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Redirect } from \"react-router\";\nimport '../LogIn/Login.css';\n\nclass SignUp extends React.Component{\n    constructor(props) {\n       super(props)\n      this.state = { nam:'', email: '', username: '', password: '', loginStatus: false }\n    }\n\n    saveLogin(nam, email, username, password) {\n      return new Promise((resolve, reject) => {\n        fetch('/signup/',{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\"name\": nam, \"email\": email, \"username\": username, \"password\": password}),\n        });\n        resolve();\n      })\n    }\n\n    handleChange(event) {\n      let name = event.target.name;\n      if (name === 'nam'){\n        this.setState({ nam: event.target.value});\n      }\n      if (name === 'email'){\n        this.setState({ email: event.target.value});\n      }\n      if (name === 'username'){\n        this.setState({ username: event.target.value});\n      }\n      if (name === 'password'){\n        this.setState({ password: event.target.value});\n      }\n\n    }\n\n    updateLoginState = () => {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          fetch('/login-status/')\n          .then((response) => response.json())\n          .then((data) => {\n            this.setState({loginStatus: data['logged in']});\n            console.log(data['logged in']);\n            resolve(data['logged in']);\n          });\n        }, 300)\n      })\n    }\n    \n    async handleSubmit(event) {\n      event.preventDefault();\n      await this.saveLogin(this.state.nam, this.state.email, this.state.username, this.state.password);\n      this.updateLoginState();\n    }\n    \n    render() {\n      if (this.state.loginStatus) {\n        //return <Redirect to=\"/\" />\n        window.location.href ='/';\n      }\n      return (\n        <form onSubmit={this.handleSubmit.bind(this)}>\n          <h1>Sign Up</h1>\n          <span className='signupSpan'><b>Name</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.nam}\n            onChange={this.handleChange.bind(this)}\n            name='nam'\n          />\n          <br></br>\n          <span className='signupSpan'><b>Email</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.email}\n            onChange={this.handleChange.bind(this)}\n            name='email'\n          />\n          <br></br>\n          <span style={{paddingRight:'280px'}}><b>Username</b></span>\n          <br></br>\n          <input \n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange.bind(this)}\n            name='username'\n          />\n          <br></br>\n          <span style={{paddingRight:'285px'}}><b>Password</b></span>\n          <br></br>\n          <input \n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange.bind(this)}\n            name='password'\n          />\n          <br></br>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      );\n    }\n}\n\nexport default SignUp;","import React, { Component } from 'react';\nimport MainChart from '../../components/MainChart'\nimport InteractiveChart from '../../components/InteractiveChart';\nimport { cleanConfirmedData, getLastValue, organizeData } from '../../utils/data';\n\nclass MainChartContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            confirmed: null,\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"mounted\")\n        // fetch(\"/us-daily-cases-confirmed\").then(data => {\n        //     console.log(data.json())\n        // })\n        fetch(\"/us-daily-cases-confirmed\").then(res => res.json()).then(data => {\n            this.setState({ confirmed: data });\n            console.log(\"CONFIRMED Cases\");\n            console.log(data);\n        });\n    }\n    render() {\n        const { confirmed } = this.state;\n        if (!confirmed) return 'Loading Data...';\n\n        return (\n            <div className=\"chartContainer\">\n                <MainChart\n                    confirmed={confirmed}\n                />\n            </div>\n        );\n    }\n}\n\nexport default MainChartContainer;","import React, { Component, Fragment } from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport InteractiveChartContainer from '../../containers/InteractiveChartContainer';\nimport MainChartContainer from '../../components/MainChartContainer';\nimport ChartContainer from '../../containers/ChartContainer';\n\nimport './HomePage.css';\n\nconst data = [\n    {\n      \"name\": \"confirmed\",\n      \"data\": \"/us-inc-deaths-confirmed-wk-avg\"\n    },\n    {\n      \"name\": \"forecast\",\n      \"data\": \"/us-inc-deaths-forecasts\"\n    },\n    {\n      \"name\": \"aggregate\",\n      \"data\": \"/us-agg-inc-deaths\"\n    },\n    {\n      \"name\": \"user_prediction\",\n      \"data\": \"/user-prediction?category=us_daily_deaths\"\n    },\n    {\n      \"name\": \"mse\",\n      \"data\": \"/us-mse-overall\"\n    },\n  ]\n\n  const CaseData = [\n    {\n      \"name\": \"confirmed\",\n      \"data\": \"/us-daily-cases-confirmed\"\n    },\n    {\n      \"name\": \"forecast\",\n      \"data\": \"/us-daily-cases-forecast\"\n    },\n    {\n      \"name\": \"aggregate\",\n      \"data\": \"/us-agg-inc-cases\"\n    },\n    {\n      \"name\": \"user_prediction\",\n      \"data\": \"/user-prediction?category=us_daily_cases\"\n    },\n    {\n      \"name\": \"mse\",\n      \"data\": \"/us-mse-overall\"\n    },\n  ]\nclass HomePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { category: \"US Daily Reported Cases\"};\n        this.chartRef = React.createRef();\n    }\n    onClick = (e) => {\n        this.setState({category: e})\n    }\n    render() {\n        let category = this.state.category;\n        console.log(category)\n        const renderChartContainer = () => {\n            if(category === \"US Daily Deaths\") {\n                return <ChartContainer key='123' compiledData={data} category=\"us_daily_deaths\"/>\n\n            }\n            else {\n                console.log(\"daily cases\")\n                return <ChartContainer key='321' compiledData={CaseData} category=\"us_daily_cases\"/>\n            }\n        }\n        return(\n            <div>\n                <br/>\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                        {this.state.category}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item eventKey=\"US Daily Deaths\" onSelect={this.onClick}>US Daily Deaths</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"US Daily Cases\" onSelect={this.onClick}>US Daily Cases</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n                <br/>\n                {renderChartContainer()}\n            </div>\n        )\n    }\n}\nexport default HomePage","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport 'leaflet/dist/leaflet.css';\n\nimport './App.css';\nimport * as ROUTES from \"./constants/routes\";\n\nimport Navbar from './components/Navbar';\nimport LandingPage from './pages/LandingPage';\nimport AboutPage from './pages/AboutPage';\nimport LeaderboardPage from './pages/LeaderboardPage';\nimport ProfilePage from './pages/ProfilePage';\nimport InteractiveChartContainer from './containers/InteractiveChartContainer';\nimport UserPredictionChartContainer from './containers/UserPredictionChartContainer';\nimport ChartContainer from './containers/ChartContainer';\n// import newDeathsContainer from './containers/newDeathsContainer';\nimport Mapportal from './components/Mapportal';\n\nimport Login from './components/LogIn';\nimport SignUp from './components/SignUp';\nimport HomePage from './pages/HomePage';\nimport MainChartContainer from './components/MainChartContainer';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            {/* <Route exact path={ROUTES.US_NATIONAL_CUM} component={ChartContainer} />\n            <Route exact path={ROUTES.US_NATIONAL_INC} component={newDeathsContainer} /> */}\n            <Route exact path={ROUTES.LANDING} component={HomePage}/>\n            <Route exact path={ROUTES.MAP_PORTAL} component={Mapportal}/>\n            <Route exact path={ROUTES.LEADERBOARD} component={LeaderboardPage} />\n            {/* <Route exact path={ROUTES.MARKET} component={MarketChart} /> */}\n            <Route exact path={ROUTES.PROFILE} component={ProfilePage} />\n            <Route exact path={ROUTES.SIGN_IN} component={Login} />\n            <Route exact path={ROUTES.SIGN_UP} component={SignUp} />\n            <Route exact path={ROUTES.ABOUT} component={AboutPage} />\n            {/* <Route exact path=\"/temp\" render={(props) => <ChartContainer compiledData={data} category=\"us_daily_deaths\"/>}/> */}\n            <Route exact path=\"/new-home\" component={HomePage}/>\n            <Route exact path=\"/dev\" component={MainChartContainer}/>\n\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/COVIDforecasts-logo-white.e6ddd865.png\";"],"sourceRoot":""}